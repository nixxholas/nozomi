// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nozomi.Repo.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Nozomi.Repo.Migrations
{
    [DbContext(typeof(NozomiDbContext))]
    [Migration("20200215174127_r4_WebsocketEntitiesCascading")]
    partial class r4_WebsocketEntitiesCascading
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Nozomi.Data.Models.Currency.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<long>("CurrencyTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<string>("DenominationName")
                        .HasColumnType("text");

                    b.Property<int>("Denominations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("assets/svg/icons/question.svg");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("Currency_PK_Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("Currency_Index_Slug");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.CurrencyPair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("APIUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CounterTicker")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyPairType")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultComponent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("MainTicker")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("CurrencyPair_PK_Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("SourceId");

                    b.HasIndex("MainTicker", "CounterTicker", "SourceId");

                    b.ToTable("CurrencyPairs");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.CurrencyProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyProperty");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.CurrencySource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("CurrencySource_PK_Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("CurrencyId", "SourceId")
                        .IsUnique()
                        .HasName("CurrencySource_CK_CurrencyId_SourceId");

                    b.ToTable("CurrencySources");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.ItemType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeShortForm")
                        .IsRequired()
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("CurrencyType_PK_Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("CurrencyTypes");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.Source", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("APIDocsURL")
                        .HasColumnType("text");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SourceTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("Source_PK_Id");

                    b.HasIndex("Abbreviation")
                        .HasName("Source_Index_Abbreviation");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("SourceTypeGuid");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.SourceType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Guid")
                        .HasName("SourceType_Guid_PK");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.ToTable("SourceTypes");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Analytical.AnalysedComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ComponentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyPairId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Delay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(86400000);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDenominated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFailing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<bool>("StoreHistoricals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UIFormatting")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("AnalysedComponent_PK_Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("CurrencyId", "ComponentType")
                        .IsUnique()
                        .HasName("AnalysedComponent_Index_CurrencyId_ComponentType");

                    b.HasIndex("CurrencyPairId", "ComponentType")
                        .IsUnique()
                        .HasName("AnalysedComponent_Index_CurrencyPairId_ComponentType");

                    b.HasIndex("CurrencyTypeId", "ComponentType")
                        .IsUnique()
                        .HasName("AnalysedComponent_Index_CurrencyTypeId_ComponentType");

                    b.ToTable("AnalysedComponents");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Analytical.AnalysedHistoricItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AnalysedComponentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoricDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("AnalysedHistoricItem_PK_Id");

                    b.HasIndex("AnalysedComponentId");

                    b.ToTable("AnalysedHistoricItems");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Component", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AnomalyIgnorance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<bool>("IsDenominated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("QueryComponent")
                        .HasColumnType("text");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<bool>("StoreHistoricals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("RequestComponent_PK_Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("RequestId", "ComponentType")
                        .IsUnique()
                        .HasName("RequestComponent_AK_RequestId_ComponentType");

                    b.ToTable("RequestComponents");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.ComponentHistoricItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("HistoricDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<long>("RequestComponentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("RcdHistoricItem_PK_Id");

                    b.HasIndex("RequestComponentId");

                    b.ToTable("RcdHistoricItems");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Request", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyPairId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataPath")
                        .HasColumnType("text");

                    b.Property<int>("Delay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<long>("FailureDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(3600000L);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("Request_PK_Id");

                    b.HasAlternateKey("Guid")
                        .HasName("Request_AK_Guid");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyPairId");

                    b.HasIndex("CurrencyTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.RequestProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<int>("RequestPropertyType")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("RequestProperty_PK_Id");

                    b.HasAlternateKey("Guid")
                        .HasName("RequestProperty_AK_Guid");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestProperties");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Websocket.WebsocketCommand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommandType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<long>("Delay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("WebsocketCommand_PK_Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("RequestId");

                    b.ToTable("WebsocketCommands");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Websocket.WebsocketCommandProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommandPropertyType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("WebsocketCommandId")
                        .HasColumnType("bigint");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("WebsocketCommandProperty_PK_Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("WebsocketCommandId");

                    b.ToTable("WebsocketCommandProperties");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.Currency", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Currency.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("CurrencyType_Currencies_Constraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.CurrencyPair", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Currency.Source", "Source")
                        .WithMany("CurrencyPairs")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("Source_CurrencyPairs_Constraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.CurrencyProperty", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Currency.Currency", "Currency")
                        .WithMany("CurrencyProperties")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.CurrencySource", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Currency.Currency", "Currency")
                        .WithMany("CurrencySources")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("CurrencySource_Currency_Constraint")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Nozomi.Data.Models.Currency.Source", "Source")
                        .WithMany("SourceCurrencies")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("CurrencySource_Source_Constraint")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Currency.Source", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Currency.SourceType", "SourceType")
                        .WithMany("Sources")
                        .HasForeignKey("SourceTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Analytical.AnalysedComponent", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Currency.Currency", "Currency")
                        .WithMany("AnalysedComponents")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("Currency_AnalysedComponents_Constraint")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nozomi.Data.Models.Currency.CurrencyPair", "CurrencyPair")
                        .WithMany("AnalysedComponents")
                        .HasForeignKey("CurrencyPairId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nozomi.Data.Models.Currency.ItemType", "ItemType")
                        .WithMany("AnalysedComponents")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("CurrencyType_AnalysedComponents_Constraint")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Analytical.AnalysedHistoricItem", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Web.Analytical.AnalysedComponent", "AnalysedComponent")
                        .WithMany("AnalysedHistoricItems")
                        .HasForeignKey("AnalysedComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Component", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Web.Request", "Request")
                        .WithMany("RequestComponents")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.ComponentHistoricItem", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Web.Component", "Component")
                        .WithMany("RcdHistoricItems")
                        .HasForeignKey("RequestComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Request", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Currency.Currency", "Currency")
                        .WithMany("Requests")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("Currencies_CurrencyRequests_Constraint")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nozomi.Data.Models.Currency.CurrencyPair", "CurrencyPair")
                        .WithMany("Requests")
                        .HasForeignKey("CurrencyPairId")
                        .HasConstraintName("CurrencyPair_CurrencyPairRequest_Constraint");

                    b.HasOne("Nozomi.Data.Models.Currency.ItemType", "ItemType")
                        .WithMany("Requests")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("CurrencyType_Request_Constraint");
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.RequestProperty", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Web.Request", "Request")
                        .WithMany("RequestProperties")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Websocket.WebsocketCommand", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Web.Request", "Request")
                        .WithMany("WebsocketCommands")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nozomi.Data.Models.Web.Websocket.WebsocketCommandProperty", b =>
                {
                    b.HasOne("Nozomi.Data.Models.Web.Websocket.WebsocketCommand", "WebsocketCommand")
                        .WithMany("WebsocketCommandProperties")
                        .HasForeignKey("WebsocketCommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
