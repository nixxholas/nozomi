@using Newtonsoft.Json
@using Nozomi.Data.Models.Web.Analytical
@using Nozomi.Preprocessing
@using Nozomi.Service.Events.Interfaces
@inject ITickerEvent _TickerEvent
@model Nozomi.Data.Models.Currency.Currency

@{
    var tickerPairs = _TickerEvent.GetCurrencyTickerPairs(Model.Abbreviation);
}

<!-- Description Section -->
<div id="partialView" class="container space-2 space-bottom-md-3">
@if (Model != null)
{
    <!-- Hero Section -->
    <div class="container">
        <div class="border-bottom space-top-2">
            <div class="media mb-5">
                <div class="u-lg-avatar mr-4">
                    <img class="img-fluid rounded-circle" :src="'/' + currency.LogoPath" alt="Image Description">
                </div>

                <div class="media-body">
                    <div class="row">
                        <div class="col-lg-6 mb-3 mb-lg-0">
                            <h1 class="h4 mb-1">
                                {{ currency.Name }}
                                <small class="font-weight-semi-bold text-muted ml-2">{{ currency.Abbreviation }}</small>
                            </h1>

                            @* <!-- Review --> *@
                            @* <span class="text-warning font-size-1"> *@
                            @*   <span class="fas fa-star"></span> *@
                            @*   <span class="fas fa-star"></span> *@
                            @*   <span class="fas fa-star"></span> *@
                            @*   <span class="fas fa-star"></span> *@
                            @*   <span class="fas fa-star"></span> *@
                            @* </span> *@
                            @* <span class="font-weight-semi-bold ml-2">4.91</span> *@
                            @* <small class="text-muted">(12k+ reviews)</small> *@
                            @* <!-- End Review --> *@
                        </div>

                        <div class="col-lg-6 text-lg-right">
                            <div class="d-flex justify-content-md-end align-items-center">
                                <!-- Bookmark -->
                                <div class="d-inline-block mr-2">
                                    <div class="bookmark-checkbox" data-toggle="tooltip" data-placement="top" title="Bookmarking coming soon!">
                                        <input type="checkbox" class="bookmark-checkbox-input" id="bookmark1">
                                        <label class="bookmark-checkbox-label" for="bookmark1"></label>
                                    </div>
                                </div>
                                <!-- End Bookmark -->

                                <a class="btn btn-sm btn-soft-primary" href="#">Website</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Viewed Info -->
            <div class="space-bottom-1">
                <div class="small text-right text-secondary">
                    <span class="fa fa-superscript mr-1"></span>
                    {{ currency.Denominations }} Denominations
                </div>
            </div>
            <!-- End Viewed Info -->
        </div>
    </div>
    <!-- End Hero Section -->

    <div class="row pt-4 pb-4" v-if="getHistoricalPriceData(true).length > 0">
        <div class="col w-100">
            <h1 class="h5 ml-1 mb-1">
                Price Chart
            </h1>
            <la-cartesian :bound="[0]" autoresize :data="getHistoricalPriceData(true)">
                <la-area curve :width="2" :width="2" prop="value"></la-area>
                <la-tooltip></la-tooltip>
            </la-cartesian>
        </div>
    </div>

    <div class="row pt-6">
        <div class="col">
            <div id="SVGmockupBg" class="svg-preloader">
                <!-- Nav Classic -->
                <div class="position-relative w-lg-85 bg-white text-center z-index-2 mx-lg-auto">
                    <ul class="nav nav-classic nav-rounded nav-shadow nav-justified" id="pills-tab" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link font-weight-medium active" id="pills-one-tab" data-toggle="pill" href="#pills-one" role="tab" aria-controls="pills-one" aria-selected="true">
                                <div class="d-md-flex justify-content-md-center align-items-md-center">
                                    <figure class="ie-height-40 d-none d-md-block w-100 max-width-6 mr-3">
                                        <img class="js-svg-injector" src="../../assets/svg/icons/icon-14.svg" alt="SVG"
                                             data-parent="#SVGmockupBg">
                                    </figure>
                                    Statistics
                                </div>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link font-weight-medium" id="pills-two-tab" data-toggle="pill" href="#pills-two" role="tab" aria-controls="pills-two" aria-selected="false">
                                <div class="d-md-flex justify-content-md-center align-items-md-center">
                                    <figure class="ie-height-40 d-none d-md-block w-100 max-width-6 mr-3">
                                        <img class="js-svg-injector" src="../../assets/svg/icons/icon-21.svg" alt="SVG"
                                             data-parent="#SVGmockupBg">
                                    </figure>
                                    Markets
                                </div>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link font-weight-medium" id="pills-three-tab" data-toggle="pill" href="#pills-three"
                               role="tab" aria-controls="pills-three" aria-selected="false">
                                <div class="d-md-flex justify-content-md-center align-items-md-center">
                                    <figure class="ie-height-40 d-none d-md-block w-100 max-width-6 mr-3">
                                        <img class="js-svg-injector" src="../../assets/svg/icons/icon-5.svg" alt="SVG"
                                             data-parent="#SVGmockupBg">
                                    </figure>
                                    Historical
                                </div>
                            </a>
                        </li>
                    </ul>
                </div>
                <!-- End Nav Classic -->

                <!-- Tab Content -->
                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade pt-9 show active" id="pills-one" role="tabpanel" aria-labelledby="pills-one-tab">
                        <p class="text-info">
                            {{ currency.Description }}
                        </p>
                        
                        <!-- Mockup Block -->
                        <div class="row justify-content-lg-between align-items-lg-center border-bottom">
                            <div v-for="aComp in currency.AnalysedComponents" class="col-6 p-3" v-if="aComp.Value != null">
                                <h4>{{ getAnalysedCompTypeStr(aComp.ComponentType) }}</h4>
                                <small class="h5 text-muted" v-if="aComp.UIFormatting == null">{{ aComp.Value }}</small>
                                <small class="h5 text-primary" v-else>{{ getAnalysedCompStr(aComp) }}</small>
                            </div>
                        </div>
                        <!-- End Mockup Block -->

                        <div class="media space-top-1">
                            <div class="d-flex w-40 w-sm-30">
                                <h4 class="h6">Share</h4>
                            </div>
                            <div class="media-body">
                                <!-- Social Networks -->
                                <ul class="list-inline mb-0">
                                    <li class="list-inline-item">
                                        <a class="btn btn-sm btn-icon btn-soft-secondary btn-bg-transparent" href="#">
                                            <span class="fa fa-facebook-f btn-icon__inner"></span>
                                        </a>
                                    </li>
                                    <li class="list-inline-item">
                                        <a class="btn btn-sm btn-icon btn-soft-secondary btn-bg-transparent" href="#">
                                            <span class="fa fa-google btn-icon__inner"></span>
                                        </a>
                                    </li>
                                    <li class="list-inline-item">
                                        <a class="btn btn-sm btn-icon btn-soft-secondary btn-bg-transparent" href="#">
                                            <span class="fa fa-twitter btn-icon__inner"></span>
                                        </a>
                                    </li>
                                    <li class="list-inline-item">
                                        <a class="btn btn-sm btn-icon btn-soft-secondary btn-bg-transparent" href="#">
                                            <span class="fa fa-github btn-icon__inner"></span>
                                        </a>
                                    </li>
                                </ul>
                                <!-- End Social Networks -->
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade pt-9" id="pills-two" role="tabpanel" aria-labelledby="pills-two-tab">
                        <!-- Mockup Block -->
                        <div class="row justify-content-lg-between align-items-lg-center">
                            <div class="col">
                                <b-table :fields="tickerPairTableFields"
                                         :items="tickerPairs">
                                    <template slot="TickerPair" slot-scope="datum">
                                        {{ datum.item.TickerPair }}
                                    </template>
                                    <template slot="Source" slot-scope="datum">
                                        {{ datum.item.Source }}
                                    </template>
                                </b-table>
                                <!-- Mockup Block -->
                            </div>
                        </div>
                        <!-- End Mockup Block -->
                    </div>
                    <div class="tab-pane fade pt-9" id="pills-three" role="tabpanel" aria-labelledby="pills-three-tab">
                        <!-- Mockup Block -->
                        <div class="row justify-content-lg-between align-items-lg-center">
                            <div class="col">
                                <b-table :items="getHistoricalPriceData().AnalysedHistoricItems"
                                         :fields="currencyHistoricPriceFields">
                                    <template slot="HistoricDateTime" slot-scope="datum">
                                        {{ moment(datum.item.HistoricDateTime).format('LLL') }}
                                    </template>
                                    <template slot="Value" slot-scope="datum">
                                        {{ numeral(datum.item.Value).format('$ 0[.]00') }}
                                    </template>
                                </b-table>
                            </div>
                        </div>
                        <!-- End Mockup Block -->
                    </div>
                </div>
                <!-- End Tab Content -->
            </div>
        </div>
    </div>
}
</div>
<!-- End Description Section -->

@section Scripts
{
    <script>
    const vm = new Vue({
      // options
      el: "#partialView",
      // Just dish any random variable in for now
      data: {
        acTypes: @Html.Raw(Json.Serialize(NozomiServiceConstants.analysedComponentTypes, new JsonSerializerSettings
                 {
                     ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                 })),
        reqCompTypes: @Html.Raw(Json.Serialize(NozomiServiceConstants.requestComponentTypes, new JsonSerializerSettings
                      {
                          ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                      })),
        currency: @Html.Raw(Json.Serialize(Model, new JsonSerializerSettings
                  {
                      ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                  })),
                  tickerPairs: @Html.Raw(Json.Serialize(tickerPairs, new JsonSerializerSettings
                               {
                                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                               })),
        currencyHistoricPriceFields: [
          {
            key: 'HistoricDateTime',
            label: 'Date & time',
            sortable: true
          },
          {
            key: 'Value',
            label: 'Price',
            sortable: true
          }],
        tickerPairTableFields: [
          {
            key: 'TickerPair',
            label: 'Pair',
            sortable: true
          },
          {
            key: 'Source',
            label: 'Exchange',
            sortable: false
          }]
      },
      created: function() {
      },
      methods: {
        getAnalysedCompTypeStr(val) {
          if (this.acTypes != null) {
            for (i = 0; i < this.acTypes.length; i++) {
              if (this.acTypes[i].Value == val) {
                return this.acTypes[i].Key;
              }
            }
          }
          
          return null;
        },
        getAnalysedCompStr(aComp) {
          if (aComp.UIFormatting != null) {
            switch (aComp.ComponentType) {
            // TODO: Make sure this is not repeated, create a vue component for this.
            case @((int) AnalysedComponentType.MarketCap):
            case @((int) AnalysedComponentType.HourlyMarketCap):
            case @((int) AnalysedComponentType.DailyMarketCap): 
            case @((int) AnalysedComponentType.CurrentAveragePrice):
            case @((int) AnalysedComponentType.HourlyAveragePrice): 
            case @((int) AnalysedComponentType.DailyAveragePrice):
            case @((int) AnalysedComponentType.DailyPriceChange): 
            case @((int) AnalysedComponentType.WeeklyPriceChange):
            case @((int) AnalysedComponentType.MonthlyPriceChange): 
            case @((int) AnalysedComponentType.DailyPricePctChange):
            case @((int) AnalysedComponentType.HourlyPricePctChange): 
            case @((int) AnalysedComponentType.DailyVolume):
                return numeral(aComp.Value).format(aComp.UIFormatting).toString();
              default:
                return aComp.Value;
            }
          } else {
            return aComp.Value;
          }
        },
        getHistoricalPriceData(laueCompat = false) {
          if (this.currency != null && this.currency.AnalysedComponents != null) {
            for (let i = 0; i < this.currency.AnalysedComponents.length; i++) {
              const currentAc = this.currency.AnalysedComponents[i];
            
              if (currentAc.ComponentType === @((int) AnalysedComponentType.HourlyAveragePrice)) {
                  if (laueCompat && currentAc.AnalysedHistoricItems != null 
                  && currentAc.AnalysedHistoricItems.length > 0) {
                      let newArr = [];
                      
                      for (let j = 0; j < currentAc.AnalysedHistoricItems.length; j++) {
                          newArr.push({ name: "Price", value: currentAc.AnalysedHistoricItems[j].Value });
                      }
                      
                      return newArr;
                  }
                  
                return currentAc;
              }
            }
          }
          
          return [];
        }
      },
      mounted: function() {
      }
    });
  </script>
}