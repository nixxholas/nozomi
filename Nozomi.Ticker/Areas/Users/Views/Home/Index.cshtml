@using System.Text.Json
@using Microsoft.AspNetCore.Identity
@using Nozomi.Base.Auth.Models
@using Nozomi.Preprocessing
@using Nozomi.Service.Events.Analysis.Interfaces
@inject IAnalysedComponentEvent AnalysedComponentEvent
@inject SignInManager<User> signInManager
@{
    ViewData["Title"] = "Home Page";
}
<!-- Hero Section -->
<div class="position-relative gradient-half-primary-v5 z-index-2 overflow-hidden space-top-2">
    <div class="container space-top-2 space-top-md-5 space-top-lg-3 space-bottom-md-5">
        <div class="row align-items-lg-center">
            <div class="col-lg-5 mb-11 mb-lg-0">
                <!-- Info -->
                <div class="mb-6">
                    <span class="btn btn-xs btn-soft-warning btn-pill mb-2 mb-sm-0 mr-2">Currently in Alpha</span>
                    <h1 class="text-white font-weight-semi-bold mb-3" v-if="currencyTypes.length > 0"
                        v-for="currencyType in currencyTypes">
                        <div v-if="currencyType.name === 'Cryptocurrency' && getACValueByComponentType(currencyType.components, 1) !== null" v-cloak>
                            {{ currencyType.name }} has
                            <span class="text-warning">
                                <strong class="u-text-animation u-text-animation--typing" v-cloak>
                                    {{ numeral(getACValueByComponentType(currencyType.components, 1)).format('$0.00 a') }}
                                </strong>
                            </span>
                            <br>
                            right now.
                        </div>
                    </h1>
                    @* <p class="text-white-70"></p> *@
                    <h1 class="text-white font-weight-semi-bold mb-3" v-else>
                        Poll any endpoint, anytime.
                    </h1>
                </div>

                @* <a class="btn btn-white btn-wide btn-pill text-primary shadow-soft transition-3d-hover mb-2 mb-sm-0 mr-4"  *@
                @*    href="#">Contact Sales</a> *@
                <a class="btn btn-warning btn-wide btn-pill transition-3d-hover mb-2 mb-sm-0" asp-controller="Account"
                   asp-action="Register">
                    Get Started
                </a>
                <!-- End Info -->
            </div>

            <div class="col-lg-7">
                <div class="position-relative">
                    <div class="js-slick-carousel u-slick u-slick--gutters-3 z-index-2"
                         data-slides-show="1"
                         data-infinite="true"
                         data-autoplay="true"
                         data-speed="5000">
                        <div class="js-slide mt-1" v-for="currencyType in currencyTypes">
                            <!-- Icon Block -->
                            <article class="card border-0 shadow-sm transition-3d-hover mb-3"
                                     v-if="currencyType.components !== null && currencyType.components.length > 0"
                                     v-for="component in currencyType.components">
                                <div class="mb-3 p-5" v-if="component.historical.length > 1">
                                    <h1 class="h4 mb-0">{{ currencyType.name }} {{ getAnalysedCompTypeStr(component.componentType) }}</h1>
                                </div>
                                <div class="card-body bg-white rounded-top p-5" v-if="component.historical.length > 1">
                                    <trend
                                        :data="component.historical.map(Number)" radius="16"
                                        :gradient="['#6fa8dc', '#42b983', '#2c3e50']" auto-draw smooth>
                                    </trend>
                                </div>
                            </article>
                            <!-- End Icon Block -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- SVG Background -->
    <figure class="position-absolute right-0 bottom-0 left-0">
        <img class="js-svg-injector" src="../../assets/svg/components/wave-1-bottom-sm.svg" alt="Image Description"
             data-parent="#SVGwave1BottomSM">
    </figure>
    <!-- End SVG Background Section -->
</div>

<div class="container shadow-lg p-3 mt-5 mb-5 bg-white rounded" v-cloak>
    <div class="row justify-content-lg-between align-items-md-center h-100">
        <div class="col h-100">
            <b-table stacked="md" :busy="isCurrencyTableBusy"
                     tbody-class="font-weight-medium" thead-class="text-uppercase font-size-1"
                     :per-page="itemsPerPage" :current-page="currentCurrencyPage"
                     class="table-borderless"
                     :fields="currencyDataFields" :items="getCurrencies">
                <div slot="table-busy" class="my-2">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
                <!-- A virtual composite column -->
                <template slot="name" slot-scope="datum">
                    <img :src="datum.item.logoPath" class="mr-1" style="width: 24px; height: 24px; vertical-align: bottom;"/>
                    <a :href="'/currency/' + datum.item.slug">{{ datum.item.name }}</a>
                </template>
                <!-- A virtual composite column -->
                <template slot="marketCap" slot-scope="datum">
                    ${{ numeral(datum.item.marketCap).format('0 a') }}
                </template>
                <!-- A virtual composite column -->
                <template slot="averagePrice" slot-scope="datum">
                    ${{ numeral(datum.item.averagePrice).format('0[.]00') }}
                </template>
                <!-- A virtual composite column -->
                <template slot="dailyAvgPctChange" slot-scope="datum">
                    <div v-if="datum.item.dailyAvgPctChange < 0.1 && datum.item.dailyAvgPctChange > -0.1">
                        {{ numeral(datum.item.dailyAvgPctChange).format('0[.]0') }}%
                        <i class="fa fa-minus">
                        </i>
                    </div>
                    <div class="text-success" v-else-if="datum.item.dailyAvgPctChange >= 0.1">
                        {{ numeral(datum.item.dailyAvgPctChange).format('0[.]0') }}%
                        <i class="fa fa-caret-up">
                        </i>
                    </div>
                    <div class="text-danger" v-else-if="datum.item.dailyAvgPctChange <= -0.1">
                        {{ numeral(datum.item.dailyAvgPctChange).format('0[.]0') }}%
                        <i class="fa fa-caret-down">
                        </i>
                    </div>
                </template>
                <!-- A virtual composite column -->
                @* <template slot="dailyVolume" slot-scope="datum"> *@
                @*     {{ numeral(datum.item.dailyVolume).format('0 a') }} {{ datum.item.abbreviation }} *@
                @* </template> *@
                <template slot="averagePriceHistory" slot-scope="datum">
                    <!-- Area Chart -->
                    <trend
                        :data="datum.item.averagePriceHistory" radius="24"
                        :gradient="['#6fa8dc', '#42b983', '#2c3e50']" auto-draw smooth
                        v-if="datum.item.averagePriceHistory != null && datum.item.averagePriceHistory.length > 0">
                    </trend>
                </template>
            </b-table>
            <b-row>
                <b-col md="6" class="my-1">
                    <b-pagination :total-rows="currencies.length" :per-page="itemsPerPage"
                                  v-model="currentCurrencyPage" class="my-0"/>
                </b-col>
            </b-row>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        const vm = new Vue({
            // options
            el: "#content",
            // Just dish any random variable in for now
            data: {
                acTypes: @Html.Raw(JsonSerializer.Serialize(NozomiServiceConstants.analysedComponentTypes)),
                currencyDataFields: [
                    {
                        key: 'name',
                        label: 'Name',
                        sortable: true
                    },
                    {
                        key: 'marketCap',
                        label: 'Market Cap',
                        sortable: true
                    },
                    {
                        key: 'averagePrice',
                        label: 'Price',
                        sortable: true
                    },
                    {
                        key: 'dailyAvgPctChange',
                        label: 'Daily Change',
                        sortable: true
                    },
                    // {
                    //     key: 'dailyVolume',
                    //     label: 'Volume',
                    //     sortable: true
                    // },
                    {
                        key: 'averagePriceHistory',
                        label: 'Price Chart',
                        sortable: false
                    }
                ],
                currentCurrencyPage: 1,
                isCurrencyTableBusy: false,
                currencies: [],
                itemsPerPage: 100,
                currencyTypes: []
            },
            created: function() {
                const connection = new SignalR.HubConnectionBuilder()
                    .withUrl("/ticker")
                    .build();

                // https://github.com/aspnet/SignalR/issues/3294
                connection.start().then(() => {
                    // connection.invoke("Subscribe", 2).catch(err => console.error(err.toString()));
                    connection.invoke("Subscribe", 3).catch(err => console.error(err.toString()));
                }).catch(err => document.write(err));

                function start() {
                    try {
                        connection.start();
                        console.log('connected');
                    } catch (err) {
                        console.log(err);
                        setTimeout(() => start(), 5000);
                    }
                };

                connection.onclose(() => {
                    start();
                });

                // connection.on("currencies",
                //     (currencies) => {
                //         this.currencies = currencies;
                //     });
                
                connection.on("currencytypes",
                    (currencyTypes) => {
                        this.currencyTypes = currencyTypes;
                    });
            },
            methods: {
              getCurrencies (ctx) {
                // Here we don't set isBusy prop, so busy state will be
                // handled by table itself
                // this.isBusy = true
                let promise = axios.get('/api/currency/getalldetailed/' + (ctx.currentPage - 1));
        
                return promise.then((data) => {
                  const items = data.data;
                  // Here we could override the busy state, setting isBusy to false
                  // this.isBusy = false
                  return(items);
                }).catch(error => {
                  // Here we could override the busy state, setting isBusy to false
                  // this.isBusy = false
                  // Returning an empty array, allows table to correctly handle
                  // internal busy state in case of error
                  return [];
                })
              },
                getAnalysedCompTypeStr(val) {
                  if (this.acTypes != null) {
                    for (i = 0; i < this.acTypes.length; i++) {
                      if (this.acTypes[i].Value === val) {
                        return this.acTypes[i].Key;
                      }
                    }
                  }
                },
                getACValueByComponentType(collection, componentType) {
                    if (collection !== null && collection.length > 0) {
                        for (let i = 0; i < collection.length; i++) {
                            if (collection[i].componentType === componentType) {
                                return collection[i].value;
                            }
                        }
                    }
                    
                    return null;
                }
            },
            mounted: function() {
            }
        });
    </script>
}