@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using Nozomi.Preprocessing
@model Nozomi.Base.Identity.ViewModels.Manage.CurrencyPair.CurrencyPairViewModel

@{
    int currencyPairType = (int) Model.CurrencyPair.CurrencyPairType;  
}

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">Currency Pair</h3>

        <b-form v-on:submit.stop.prevent="onCPEditSubmit">
            <b-form-group label="Main Currency">
                <b-form-select v-model="editCPForm.mainCurrencyAbbrv">
                    <option v-for="currency in currencies"
                            :key="currency.name"
                            :value="currency.abbreviation">
                        {{ currency.name }}
                    </option>
                </b-form-select>
            </b-form-group>

            <b-form-group label="Counter Currency">
                <b-form-select v-model="editCPForm.counterCurrencyAbbrv">
                    <option v-for="currency in currencies"
                            :key="currency.name"
                            :value="currency.abbreviation">
                        {{ currency.name }}
                    </option>
                </b-form-select>
            </b-form-group>

            <b-form-group label="Currency Pair Type">
                <b-form-select v-model="editCPForm.currencyPairType">
                    <option v-for="currencyPairType in currencyPairTypes"
                            :key="currencyPairType.key"
                            :value="currencyPairType.value">
                        {{ currencyPairType.key}}
                    </option>
                </b-form-select>
            </b-form-group>

            <b-form-group label="Source">
                <b-form-select v-model="editCPForm.sourceId">
                    <option v-for="source in sources"
                            :key="source.name"
                            :value="source.id">
                        {{ source.name }}
                    </option>
                </b-form-select>
            </b-form-group>

            <b-form-group label="API Url">
                <b-form-input
                    v-model="editCPForm.apiUrl"
                    required
                    type="url"
                    placeholder="Enter Api Url ">
                </b-form-input>
            </b-form-group>

            <b-form-group label="Default Component">
                <b-form-input
                    v-model="editCPForm.defaultComponent"
                    required
                    placeholder="Enter Default Component ">
                </b-form-input>
            </b-form-group>

            <b-form-group>
                <b-form-checkbox v-model="editCPForm.isEnabled">Is Enabled</b-form-checkbox>
            </b-form-group>
            <b-button variant="primary" class="mb-3" type="submit">Save Changes</b-button>
        </b-form>

        <hr/>

        <h3 class="mb-6">Analysed Component</h3>
        @* Table for analysedComponent *@
        <b-button variant="primary" class="mb-3" v-on:click="showAcAddModal">Create Analysed Component</b-button>
        <b-table :items="currencyPair.analysedComponents" :fields="analysedComponentsDataFields">
            <template slot="AnalysedComponentType" slot-scope="datum">
                {{ getAnalysedComponentTypeStr(datum.item.componentType) }}
            </template>
            <template slot="Delay" slot-scope="datum">
                {{ datum.item.delay }}
            </template>
            <template slot="IsDenominated" slot-scope="datum">
                {{ datum.item.isDenominated }}
            </template>
            <template slot="AnalysedComponentValue" slot-scope="datum">
                {{ datum.item.value }}
            </template>
            <template slot="Remove" slot-scope="datum">
                <b-button variant="danger" v-on:click="showAcDeleteModal(datum.item.id)" 
                          v-if="datum.item.deletedAt === null">Remove</b-button>
            </template>
        </b-table>
        
        <!-- AnalysedComponent AddModal -->
        <b-modal ref="ac-add-modal" size="xl" 
                 title="Create an Analysed Component for @string.Concat(Model.CurrencyPair.MainCurrencyAbbrv, 
                                                             Model.CurrencyPair.CounterCurrencyAbbrv)" 
                 ok-title="Create" v-on:ok="handleAcAddOk">
            <b-form v-on:submit.stop.prevent="onAcAddSubmit">
                <b-form-group label="Type">
                    <b-form-select v-model="addAcForm.componentType">
                        <option v-for="acType in analysedComponentTypes" :value="acType.value">{{ acType.key }}</option>
                    </b-form-select>
                </b-form-group>
                
                <b-form-group label="UI Formatting">
                    <b-form-input
                        v-model="addAcForm.uiFormatting">
                    </b-form-input>
                </b-form-group>
                
                <b-form-group label="Delay">
                    <b-form-input
                        v-model="addAcForm.delay">
                    </b-form-input>
                </b-form-group>
                
                <b-form-checkbox v-model="addAcForm.isDenominated" switch>
                    Denominated
                </b-form-checkbox>
                
                <b-form-checkbox v-model="addAcForm.isEnabled" switch>
                    Enabled
                </b-form-checkbox>
            </b-form>
        </b-modal>
        
        <!-- Delete AnalysedComponent Modal -->
        <b-modal ref="ac-delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleAcDeleteOk" centered>
            <p>Are you sure that you want to remove this analysed component from this currency?</p>
        </b-modal>
    </div>
</div>

@section Scripts
{
    <script>
        const vm = new Vue({
            el: '#content',
            data: {
                addAcForm: {
                    currencyPairId: @Model.CurrencyPair.Id,    
                    componentType: 0,
                    delay: 10000,
                    uiFormatting: '',
                    isDenominated: false,
                    isEnabled: false
                },
                deleteAcModal: {
                    id: Number,
                    name: ''
                },
                analysedComponentsDataFields: [
                    {
                        key: 'AnalysedComponentType',
                        label: 'Component Type',
                        sortable: true,
                    },
                    {
                        key: 'Delay',
                        label: 'Delay',
                        sortable: true,
                    },
                    {
                        key: 'IsDenominated',
                        label: 'Denominated',
                        sortable: true,
                    },
                    {
                        key: 'AnalysedComponentValue',
                        label: 'Value',
                        sortable: true,
                    },
                    {
                        key: 'Remove',
                        label: '',
                        sortable: false
                    }
                ],
                analysedComponentTypes:
                    @Html.Raw(JsonConvert.SerializeObject(NozomiServiceConstants.analysedComponentTypes,Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencyPair:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencyPair, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver(),
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                    })),
                currencies:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Currencies, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                sources:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Sources, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencyPairTypes:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencyPairTypes, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                editCPForm: {
                    id: @Model.CurrencyPair.Id,
                    mainCurrencyAbbrv: '@Model.CurrencyPair.MainCurrencyAbbrv',
                    counterCurrencyAbbrv: '@Model.CurrencyPair.CounterCurrencyAbbrv',
                    currencyPairType: @currencyPairType,
                    apiUrl: '@Model.CurrencyPair.APIUrl',
                    defaultComponent: '@Model.CurrencyPair.DefaultComponent',
                    sourceId: @Model.CurrencyPair.SourceId,
                    isEnabled: @Model.CurrencyPair.IsEnabled.ToString().ToLower(),
                }
            },
            methods: {
                onCPEditSubmit() {
                    axios({
                        method: 'PUT',
                        url: `/Admin/CurrencyPair/Update/${this.editCPForm.id}`,
                        data: this.editCPForm
                    }).then(response => {
                        alert(response.data.message);
                    }).catch(error => {
                        alert('Failed to edit CurrencyPair');
                    });
                },
                getAnalysedComponentTypeStr(val) {
                    if (this.analysedComponentTypes != null) {
                        for (let i = 0; i < this.analysedComponentTypes.length; i++) {
                            if (this.analysedComponentTypes[i].value === val) {
                                return this.analysedComponentTypes[i].key;
                            }
                        }
                    }
                    return null;
                },
                showAcAddModal() {
                    this.$refs['ac-add-modal'].show();
                },
                handleAcAddOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onAcAddSubmit();
                },
                onAcAddSubmit() {
                    // Send a POST request
                    axios({
                      method: 'post',
                      responseType: 'application/json',
                      url: '/Admin/AnalysedComponent/Create',
                      data: this.addAcForm
                    })
                    .then(function (response) {
                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        alert("Create failed");
                    });
                    
                    // Hide the modal manually
                    this.$refs['property-add-modal'].hide();
                },
                // Methods for delete modal
                showAcDeleteModal(id) {
                    this.deleteAcModal.id = id;

                    this.$refs['ac-delete-modal'].show();
                },
                                 async handleAcDeleteOk(bvModalEvt) {
                                     bvModalEvt.preventDefault();
                                     console.dir(this.deleteAcModal);
                                     
                                     // Send a POST request
                                     axios({
                                       method: 'delete',
                                       url: '/Admin/AnalysedComponent/Delete/' + this.deleteAcModal.id,
                                     })
                                     .then(function (response) {
                                         console.log(response);
                                         
                                         // Put alert for now, change the ui later.
                                         alert(response.data.message);
                                     })
                                     .catch(function (error) {
                                         console.log(error);
                                         alert("Delete failed");
                                     });
                                     
                                     // Hide the modal manually
                                     this.$refs['ac-delete-modal'].hide();
                                 }
            }
        })
    </script>
}