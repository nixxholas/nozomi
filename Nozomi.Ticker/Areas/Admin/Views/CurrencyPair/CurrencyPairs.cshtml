@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model Nozomi.Base.Identity.ViewModels.Manage.CurrencyPair.CurrencyPairViewModel

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">Currency Pairs</h3>

        <b-button variant="primary" class="mb-3" v-on:click="showCreateModal">Create</b-button>

        <b-table
            :per-page="currencyPairPerPage" :current-page="currentCurrencyPairPage"
            :items="currencyPairs" :fields="dataFields">
            <template slot="MainCurrencyAbbrv" slot-scope="datum">
                {{ datum.item.mainCurrencyAbbrv }}
            </template>
            <template slot="CounterCurrencyAbbrv" slot-scope="datum">
                {{ datum.item.counterCurrencyAbbrv }}
            </template>
            <template slot="CurrencyPairType" slot-scope="datum">
                {{ datum.item.currencyPairType }}
            </template>
            <template slot="ApiUrl" slot-scope="datum">
                <a :href="datum.item.apiUrl">{{ datum.item.apiUrl }}</a>
            </template>
            <template slot="SourceName" slot-scope="datum">
                {{ getSourceName(datum.item.sourceId) }}
            </template>
            <template slot="DefaultComponent" slot-scope="datum">
                {{ datum.item.defaultComponent }}
            </template>
            <template slot="IsEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.isEnabled" disabled/>
            </template>
            <template slot="Edit" slot-scope="datum">
                <b-button variant="primary" b-modal.modal-xl
                          v-on:click="showEditModal(datum.item.id, datum.item.mainCurrencyAbbrv, datum.item.counterCurrencyAbbrv, datum.item.currencyPairType,
                          datum.item.apiUrl, datum.item.sourceId, datum.item.defaultComponent, datum.item.isEnabled)">
                    Edit
                </b-button>
            </template>
            <template slot="Delete" slot-scope="datum">
                <b-button variant="danger" v-on:click="showDeleteModal(datum.item.id, datum.item.mainCurrencyAbbrv, datum.item.counterCurrencyAbbrv)">Delete</b-button>
            </template>
        </b-table>
    </div>
</div>

<!-- CreateModal -->
<b-modal ref="create-modal" size="xl" title="Create Currency Pair" ok-title="Create" v-on:ok="handleCreateOk">
    <b-form v-on:submit.stop.prevent="onCreateSubmit">
        <b-form-group label="Main Currency">
            <b-form-select v-model="createForm.mainCurrencyAbbrv">
                <option v-for="currency in currencies"
                        :key="currency.name"
                        :value="currency.abbreviation">
                    {{ currency.name }}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="Counter Currency">
            <b-form-select v-model="createForm.counterCurrencyAbbrv">
                <option v-for="currency in currencies"
                        :key="currency.name"
                        :value="currency.abbreviation">
                    {{ currency.name }}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="Currency Pair Type">
            <b-form-select v-model="createForm.currencyPairType">
                <option v-for="currencyPairType in currencyPairTypes"
                        :key="currencyPairType.key"
                        :value="currencyPairType.value">
                    {{ currencyPairType.key }}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="Source">
            <b-form-select v-model="createForm.sourceId">
                <option v-for="source in sources"
                        :key="source.name"
                        :value="source.id">
                    {{ source.name }}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="API Url">
            <b-form-input
                v-model="createForm.apiUrl"
                required
                type="url"
                placeholder="Enter Api Url ">
            </b-form-input>
        </b-form-group>

        <b-form-group label="Default Component">
            <b-form-input
                v-model="createForm.defaultComponent"
                required
                type="url"
                placeholder="Enter Default Component ">
            </b-form-input>
        </b-form-group>

        <b-form-group>
            <b-form-checkbox v-model="createForm.isEnabled">Is Enabled</b-form-checkbox>
        </b-form-group>
    </b-form>
</b-modal>

<!-- EditModal -->
<b-modal ref="edit-modal" size="xl" title="Edit Currency Pair" ok-title="Edit" v-on:ok="handleEditOk">
    <b-form v-on:submit.stop.prevent="onEditSubmit">
        <b-form-group label="Main Currency">
            <b-form-select v-model="editForm.mainCurrencyAbbrv">
                <option v-for="currency in currencies"
                        :key="currency.name"
                        :value="currency.abbreviation">
                    {{ currency.name }}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="Counter Currency">
            <b-form-select v-model="editForm.counterCurrencyAbbrv">
                <option v-for="currency in currencies"
                        :key="currency.name"
                        :value="currency.abbreviation">
                    {{ currency.name }}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="Currency Pair Type">
            <b-form-select v-model="editForm.currencyPairType">
                <option v-for="currencyPairType in currencyPairTypes"
                        :key="currencyPairType.key"
                        :value="currencyPairType.value">
                    {{currencyPairType.key}}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="Source">
            <b-form-select v-model="editForm.sourceId">
                <option v-for="source in sources"
                        :key="source.name"
                        :value="source.id">
                    {{ source.name }}
                </option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="API Url">
            <b-form-input
                v-model="editForm.apiUrl"
                required
                type="url"
                placeholder="Enter Api Url ">
            </b-form-input>
        </b-form-group>

        <b-form-group label="Default Component">
            <b-form-input
                v-model="editForm.defaultComponent"
                required
                type="url"
                placeholder="Enter Defaullt Component ">
            </b-form-input>
        </b-form-group>

        <b-form-group>
            <b-form-checkbox v-model="editForm.isEnabled">Is Enabled</b-form-checkbox>
        </b-form-group>
    </b-form>
</b-modal>

<!-- DeleteModal -->
<b-modal ref="delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleDeleteOk" centered>
    <p>Are you sure that you want to delete {{ deleteModal.mainCurrencyAbbrv }}/{{ deleteModal.counterCurrencyAbbrv }}?</p>
</b-modal>

@section Scripts{
    <script>
        const vm = new Vue({
            el: "#content",
            data: {
                currentCurrencyPairPage: 1,
                currencyPairPerPage: 20,
                dataFields: [
                    {
                        key: 'MainCurrencyAbbrv',
                        label: 'Main Currency',
                        sortable: true
                    },
                    {
                        key: 'CounterCurrencyAbbrv',
                        label: 'Counter Currency',
                        sortable: true
                    },
                    {
                        key: 'CurrencyPairType',
                        label: 'Currency Pair Type',
                        sortable: true
                    },
                    {
                        key: 'ApiUrl',
                        label: 'API URL',
                        sortable: true
                    },
                    {
                        key: 'SourceName',
                        label: 'Source',
                        sortable: false
                    },
                    {
                        key: 'DefaultComponent',
                        label: 'Default Component',
                        sortable: false
                    },
                    {
                        key: 'IsEnabled',
                        label: 'Is Enabled',
                        sortable: true
                    },
                    {
                        key: 'Edit',
                        label: '',
                        sortable: false
                    },
                    {
                        key: 'Delete',
                        label: '',
                        sortable: false
                    }
                ],
                currencyPairs:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencyPairs, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencies:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Currencies, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                sources:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Sources, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencyPairTypes:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencyPairTypes, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                createForm: {
                    mainCurrencyAbbrv: '',
                    counterCurrencyAbbrv: '',
                    apiUrl: '',
                    defaultComponent: '',
                    sourceId: Number,
                    isEnabled: Boolean,
                },
                editForm: {
                    id: Number,
                    mainCurrencyAbbrv: '',
                    counterCurrencyAbbrv: '',
                    apiUrl: '',
                    defaultComponent: '',
                    sourceId: Number,
                    isEnabled: Boolean,
                },
                deleteModal: {
                    id: Number,
                    mainCurrencyAbbrv: '',
                    counterCurrencyAbbrv: ''
                },
                methods: {
                    getSourceName(id) {
                        const sources = this.sources;
                        for (let i = 0; i < this.sources.length; i++) {
                            if (this.sources[i].id === id) {
                                return this.sources[i].name;
                            }
                        }
                    },
                    showCreateModal() {
                        this.$refs['create-modal'].show();
                    },
                    handleCreateOk(bvModalEvt) {
                        bvModalEvt.preventDefault();
                        this.onCreateSubmit();
                    },
                    async onCreateSubmit() {
                        axios({
                            method: 'POST',
                            url: '/Admin/CurrencyPair/Create',
                            data: this.createForm
                        }).then(response => {
                            console.log(response);
                            this.currencyPairs.push(response.item);
                        }).catch(error => {
                            alert('Failed to create CurrencyPair');
                            console.log(error);
                        }).finally(() => {
                            // Hide the modal manually
                            this.$refs['create-modal'].hide();
                        });
                    },
                    // Methods for edit modal
                    showEditModal(id, mainCurrencyAbbrv, counterCurrencyAbbrv, currencyPairType, apiUrl, sourceId,
                    defaultComponent, isEnabled) {
                        this.editForm.id = id;
                        this.editForm.mainCurrencyAbbrv = mainCurrencyAbbrv;
                        this.editForm.counterCurrencyAbbrv = counterCurrencyAbbrv;
                        this.editForm.currencyPairType = currencyPairType;
                        this.editForm.apiUrl = apiUrl;
                        this.editForm.sourceId = sourceId;
                        this.editForm.defaultComponent = defaultComponent;
                        this.editForm.isEnabled = isEnabled;

                        this.$refs['edit-modal'].show();
                    },
                    handleEditOk(bvModalEvt) {
                        // Prevent modal from closing
                        bvModalEvt.preventDefault();
                        // Trigger submit handler
                        this.onEditSubmit();
                    },
                    async onEditSubmit() {
                        axios({
                            method: 'PUT',
                            url: `/Admin/CurrencyPair/Update/${this.editForm.id}`,
                            data: this.editForm
                        }).then(response => {
                            alert(response.data.message);
                            this.currencyPairs.find((element, index) => {
                                if (element.Id === this.editForm.id) {
                                    this.currencyPairs[index].mainCurrencyAbbrv = this.editForm.mainCurrencyAbbrv;
                                    this.currencyPairs[index].counterCurrencyAbbrv = this.editForm.counterCurrencyAbbrv;
                                    this.currencyPairs[index].currencyPairType = this.editForm.currencyPairType;
                                    this.currencyPairs[index].apiUrl = this.editForm.apiUrl;
                                    this.currencyPairs[index].sourceId = this.editForm.sourceId;
                                    this.currencyPairs[index].defaultComponent = this.editForm.defaultComponent;
                                    this.currencyPairs[index].isEnabled = this.editForm.isEnabled;
                                }
                            });
                        }).catch(error => {
                            alert('Failed to edit CurrencyPair');
                        }).finally(() => {
                            //Hide the modal manually
                            this.$refs['edit-modal'].hide();
                        });
                    },
                    // Methods for delete modal
                    showDeleteModal(id, mainCurrencyAbbrv, counterCurrencyAbbrv) {
                        this.deleteModal.id = id;
                        this.deleteModal.mainCurrencyAbbrv = mainCurrencyAbbrv;
                        this.deleteModal.counterCurrencyAbbrv = counterCurrencyAbbrv;

                        this.$refs['delete-modal'].show();
                    },
                    async handleDeleteOk(bvModalEvt) {
                        bvModalEvt.preventDefault();

                        axios({
                            method: 'DELETE',
                            url: `/Admin/CurrencyPair/Delete/${this.deleteForm.id}`
                        }).then(response => {
                            // Update the datatable
                            const index = this.currencyPairs.findIndex(element => element.Id === this.deleteModal.Id);
                            this.currencies.splice(index, 1);

                            alert(response.data.message);
                        }).catch(error => {
                            console.log(error);
                        }).finally(() => {
                            this.$refs['delete-modal'].hide();
                        });

                        const response = await fetch(`/Admin/Source/DeleteSource/${this.deleteModal.id}`,
                            {
                                method: 'DELETE'
                            });

                        if (response.status === 200) {
                            // Update the datatable
                            const index = this.sources.findIndex(element => element.Id === this.deleteModal.id);
                            this.sources.splice(index, 1);

                            alert(`Successfully deleted ${this.deleteModal.name}`);
                        } else {
                            alert("Delete failed");
                        }

                        this.$refs['delete-modal'].hide();
                    }
                }
            })
    </script>

    }