@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model Nozomi.Ticker.Areas.Admin.Controllers.Source.IndexViewModel

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">Sources</h3>

        <b-button variant="primary" class="mb-3" v-on:click="showCreateModal">Create</b-button>
        
        <b-table
            :per-page="sourcesDataRowsPerPage" :current-page="currentSourceDataPage"
            :items="sources" :fields="dataFields">
            <template slot="Name" slot-scope="datum">
                {{ datum.item.name }}
            </template>
            <template slot="Abbreviation" slot-scope="datum">
                {{ datum.item.abbreviation }}
            </template>
            <template slot="APIDocsURL" slot-scope="datum">
                <a :href="datum.item.apiDocsURL">{{ datum.item.apiDocsURL }}</a>
            </template>
            <template slot="IsEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.isEnabled" disabled/>
            </template>
            <template slot="Edit" slot-scope="datum">
                <b-button variant="primary" b-modal.modal-xl
                          v-on:click="showEditModal(datum.item.id, datum.item.name, datum.item.abbreviation, datum.item.apiDocsURL, datum.item.isEnabled)">
                    Edit
                </b-button>
            </template>
            <template slot="Delete" slot-scope="datum">
                <b-button variant="danger" v-on:click="showDeleteModal(datum.item.id, datum.item.name)">Delete</b-button>
            </template>
        </b-table>
    </div>
</div>

<!-- CreateModal -->
<b-modal ref="create-modal" size="xl" title="Create Source" ok-title="Create" v-on:ok="handleCreateOk">
    <b-form v-on:submit.stop.prevent="onCreateSubmit">
        <b-form-group label="Source Name">
            <b-form-input
                v-model="createForm.sourceName"
                required
                placeholder="Enter source name">
            </b-form-input>
        </b-form-group>

        <b-form-group label="Abbreviation">
            <b-form-input
                v-model="createForm.abbreviation"
                required
                placeholder="Enter source abbreviation">
            </b-form-input>
        </b-form-group>

        <b-form-group label="Api Docs URL">
            <b-form-input
                v-model="createForm.apiDocsURL"
                required
                type="url"
                placeholder="Enter Api Docs URL abbreviation">
            </b-form-input>
        </b-form-group>
        
        <b-form-group>
            <b-form-checkbox v-model="createForm.isEnabled">Is Enabled</b-form-checkbox>
        </b-form-group>
    </b-form>
</b-modal>

<!-- EditModal -->
<b-modal ref="edit-modal" size="xl" title="Edit Source" ok-title="Save changes" v-on:ok="handleEditOk">
    <b-form v-on:submit.stop.prevent="onEditSubmit">
        <b-form-group
            id="sourceName-input-group"
            label="Name"
            label-for="sourceName-input">
            <b-form-input
                id="sourceName-input"
                v-model="editForm.sourceName"
                required
                placeholder="Enter source name">
            </b-form-input>
        </b-form-group>

        <b-form-group
            id="abbreviation-input-group"
            label="Abbreviation"
            label-for="abbreviation-input">
            <b-form-input
                id="abbreviation-input"
                v-model="editForm.abbreviation"
                required
                placeholder="Enter source abbreviation">
            </b-form-input>
        </b-form-group>

        <b-form-group id="apiDocsURL-input-group" label="API Docs URL:" label-for="apiDocsURL-input">
            <b-form-input
                id="apiDocsURL-input"
                v-model="editForm.apiDocsURL"
                required
                placeholder="Enter source API documentation URL">
            </b-form-input>
        </b-form-group>

        <b-form-group id="isEnabled-input-group">
            <b-form-checkbox v-model="editForm.isEnabled" switch>Is Enabled</b-form-checkbox>
        </b-form-group>
    </b-form>
</b-modal>


<!-- DeleteModal -->
<b-modal ref="delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleDeleteOk" centered>
    <p>Are you sure that you want to delete {{ deleteModal.name }} source?</p>
</b-modal>

@section Scripts {
    <script>
        const vm = new Vue({
            // options
            el: "#content",
            // Just dish any random variable in for now
            data: {
                dataFields: [
                    {
                        key: 'Name',
                        label: 'Name',
                        sortable: true
                    },
                    {
                        key: 'Abbreviation',
                        label: 'Abbreviation',
                        sortable: true
                    },
                    {
                        key: 'APIDocsURL',
                        label: 'API Docs URL',
                        sortable: true
                    },
                    {
                        key: 'IsEnabled',
                        label: 'Is Enabled',
                        sortable: true
                    },
                    {
                        key: 'Edit',
                        label: '',
                        sortable: false
                    },
                    {
                        key: 'Delete',
                        label: '',
                        sortable: false
                    }
                ],
                sourcesDataRowsPerPage: 20,
                currentSourceDataPage: 1,
                sources:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Sources, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver() 
                    })),
                createForm: {
                    sourceName: '',
                    abbreviation: '',
                    apiDocsURL: '',
                    isEnabled: Boolean
                },
                editForm: {
                    id: Number,
                    sourceName: '',
                    abbreviation: '',
                    apiDocsURL: '',
                    isEnabled: Boolean
                },
                deleteModal: {
                    id: Number,
                    name: ''
                }
            },
            methods: {
                showCreateModal() {
                    this.$refs['create-modal'].show();
                },
                handleCreateOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onCreateSubmit();
                },
                async onCreateSubmit() {
                    var formData = new FormData();
                    formData.append('Id', this.createForm.id);
                    formData.append('Name', this.createForm.sourceName);
                    formData.append('Abbreviation', this.createForm.abbreviation);
                    formData.append('ApiDocsURL', this.createForm.apiDocsURL);
                    formData.append('IsEnabled', this.createForm.isEnabled);

                    const response = await fetch('/Admin/Source/CreateSource',
                        {
                            method: 'POST',
                            body: formData
                        });

                    if (response.status === 200) {
                        const data = await response.json();

                        const newRequest = data.item;

                        console.log(newRequest);
                        
                        this.sources.push(newRequest);
                        // Put alert for now, change the ui later.
                        alert(data.message);
                    } else {
                        alert("Create failed");
                    }
                    // Hide the modal manually
                    this.$refs['create-modal'].hide();
                },
                // Methods for edit modal
                showEditModal(id, sourceName, abbreviation, apiDocsURL, isEnabled) {
                    this.editForm.id = id;
                    this.editForm.sourceName = sourceName;
                    this.editForm.abbreviation = abbreviation;
                    this.editForm.apiDocsURL = apiDocsURL;
                    this.editForm.isEnabled = isEnabled;

                    this.$refs['edit-modal'].show();
                },
                handleEditOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onEditSubmit();
                },
                async onEditSubmit() {
                    var formData = new FormData();
                    formData.append('Id', this.editForm.id);
                    formData.append('Name', this.editForm.sourceName);
                    formData.append('Abbreviation', this.editForm.abbreviation);
                    formData.append('ApiDocsURL', this.editForm.apiDocsURL);
                    formData.append('IsEnabled', this.editForm.isEnabled);

                    const response = await fetch(`/Admin/Source/EditSource/${this.editForm.id}`,
                        {
                            method: 'PUT',
                            body: formData
                        });

                    if (response.status === 200) {
                        // Update the data table
                        this.sources.find((element, index) => {
                            if (element.Id === this.editForm.id) {
                                this.sources[index].Name = this.editForm.sourceName;
                                this.sources[index].Abbreviation = this.editForm.abbreviation;
                                this.sources[index].ApiDocsURL = this.editForm.apiDocsURL;
                                this.sources[index].IsEnabled = this.editForm.isEnabled;
                            }
                        });

                        // Put alert for now, change the ui later.
                        alert("Successfully updated source");
                    } else {
                        alert("Update failed");
                    }

                    // Hide the modal manually
                    this.$refs['edit-modal'].hide();
                },
                // Methods for delete modal
                showDeleteModal(id, sourceName) {
                    this.deleteModal.id = id;
                    this.deleteModal.name = sourceName;

                    this.$refs['delete-modal'].show();
                },
                async handleDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();

                    const response = await fetch(`/Admin/Source/DeleteSource/${this.deleteModal.id}`,
                        {
                            method: 'DELETE'
                        });

                    if (response.status === 200) {
                        // Update the datatable
                        const index = this.sources.findIndex(element => element.Id === this.deleteModal.id);
                        this.sources.splice(index, 1);

                        alert(`Successfully deleted ${this.deleteModal.name}`);
                    } else {
                        alert("Delete failed");
                    }

                    this.$refs['delete-modal'].hide();
                }
            }
        });
    </script>
}