@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using Nozomi.Preprocessing
@model Nozomi.Data.ViewModels.Admin.Currency.CurrencyViewModel

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">@Model.Currency.Name</h3>

        <b-form v-on:submit.prevent="onEditRequestSubmit">
            <div class="col-md-4 mb-3">
                <b-form-group label="Currency name">
                    <b-form-input
                        v-model="editCurrency.name"
                        placeholder="Enter currency name">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Currency Abbreviation">
                    <b-form-input
                        v-model="editCurrency.abbreviation"
                        placeholder="Enter currency abbreviation">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Slug">
                    <b-form-input
                        v-model="editCurrency.slug"
                        placeholder="Enter slug">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Currency Type" label-for="currencyType-input">
                    <b-form-select v-model="editCurrency.currencyTypeId" :options="currencyTypes"></b-form-select>
                </b-form-group>

                <b-form-group label="Description">
                    <b-form-textarea
                        v-model="editCurrency.description"
                        placeholder="Enter description (optional)">
                    </b-form-textarea>
                </b-form-group>

                <b-form-group label="Denomination Name">
                    <b-form-input
                        v-model="editCurrency.denominationName"
                        placeholder="Enter denomination name">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Denomination">
                    <b-form-input
                        v-model="editCurrency.denomination"
                        placeholder="Enter denomination">
                    </b-form-input>
                </b-form-group>

                <b-form-group id="isEnabled-input-group">
                    <b-form-checkbox v-model="editCurrency.isEnabled">Is Enabled</b-form-checkbox>
                </b-form-group>
            </div>

            <b-button variant="primary" class="mb-3" type="submit">Save Changes</b-button>
        </b-form>

        <hr/>

        <h3>Sources in @Model.Currency.Name</h3>
        <!-- Currency source table -->
        <b-button variant="primary" class="mb-3" v-on:click="showSourceAddModal">Add Source</b-button>

        <b-table
            :per-page="sourceDataRowsPerPage" :current-page="sourceCurrentPage"
            :items="currencySources" :fields="sourceDataFields">
            <template slot="Name" slot-scope="datum">
                {{ datum.item.source.name }}
            </template>
            <template slot="Abbreviation" slot-scope="datum">
                {{ datum.item.source.abbreviation }}
            </template>
            <template slot="APIDocsURL" slot-scope="datum">
                <a :href="datum.item.apiDocsURL">{{ datum.item.source.apiDocsURL }}</a>
            </template>
            <template slot="isEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.source.isEnabled" disabled/>
            </template>
            <template slot="Remove" slot-scope="datum">
                <b-button variant="danger" v-on:click="showSourceDeleteModal(datum.item.id, datum.item.source.name)">Remove</b-button>
            </template>
        </b-table>

        <hr/>
        
        <h3>Properties</h3>
        <!-- Currency property table -->
        <b-button variant="primary" class="mb-3" v-on:click="showPropertyAddModal">Create property</b-button>
        <b-table v-if="currencyProperties != null && currencyProperties.length > 0"
                 :per-page="sourceDataRowsPerPage" :current-page="propertiesCurrentPage"
                 :items="currencyProperties" :fields="propertyDataFields">
            <template slot="type" slot-scope="datum">
                {{ getCurrencyPropertyString(datum.item.type) }}
            </template>
            <template slot="value" slot-scope="datum">
                {{ datum.item.value }}
            </template>
            <template slot="isEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.isEnabled" disabled/>
            </template>
            <template slot="Edit" slot-scope="datum">
                <b-button variant="primary" v-on:click="showPropertyEditModal(datum.item)">Edit</b-button>
            </template>
            <template slot="Remove" slot-scope="datum">
                <b-button variant="danger" v-on:click="showPropertyDeleteModal(datum.item.id, datum.item.type)">Remove</b-button>
            </template>
        </b-table>
        
        <hr/>
        
        <h3>Analysed Components</h3>
        <!-- Currency AC table -->
        <b-button variant="primary" class="mb-3" v-on:click="showAcAddModal">Create Analysed Component</b-button>
        <b-table v-if="analysedComponents != null && analysedComponents.length > 0"
                 :per-page="acDataRowsPerPage" :current-page="acCurrentPage"
                 :items="analysedComponents" :fields="acDataFields">
            <template slot="type" slot-scope="datum">
                {{ getAcString(datum.item.componentType) }}
            </template>
            <template slot="value" slot-scope="datum">
                {{ datum.item.value }}
            </template>
            <template slot="isEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.isEnabled" disabled/>
            </template>
            <template slot="Remove" slot-scope="datum">
                <b-button variant="danger" v-on:click="showAcDeleteModal(datum.item.id, datum.item.type)">Remove</b-button>
            </template>
        </b-table>
    </div>
</div>

<!-- Source AddModal -->
<b-modal ref="source-add-modal" size="xl" title="Add source to @Model.Currency.Name" ok-title="Create" v-on:ok="handleSourceAddOk">
    <b-form v-on:submit.stop.prevent="onSourceAddSubmit">
        <b-form-group label="Currency source">
            <b-form-select v-model="addSourceForm.currencySourceId" :options="addSourceForm.currencySourcesOptions"></b-form-select>
        </b-form-group>
    </b-form>
</b-modal>

<!-- DeleteModal -->
<b-modal ref="source-delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleSourceDeleteOk" centered>
    <p>Are you sure that you want to remove {{ deleteSourceModal.name }} source from this currency?</p>
</b-modal>

<!-- AnalysedComponent AddModal -->
<b-modal ref="ac-add-modal" size="xl" title="Create an Analysed Component for @Model.Currency.Name" ok-title="Create" v-on:ok="handleAcAddOk">
    <b-form v-on:submit.stop.prevent="onAcAddSubmit">
        <b-form-group label="Type">
            <b-form-select v-model="addAcForm.componentType">
                <option v-for="acType in acTypes" :value="acType.value">{{ acType.key }}</option>
            </b-form-select>
        </b-form-group>
        
        <b-form-group label="UI Formatting">
            <b-form-input
                v-model="addPropertyForm.uiFormatting">
            </b-form-input>
        </b-form-group>
        
        <b-form-group label="Delay">
            <b-form-input
                v-model="addPropertyForm.delay">
            </b-form-input>
        </b-form-group>
        
        <b-form-checkbox v-model="addAcForm.isDenominated" switch>
            Denominated
        </b-form-checkbox>
        
        <b-form-checkbox v-model="addAcForm.isEnabled" switch>
            Enabled
        </b-form-checkbox>
    </b-form>
</b-modal>

<!-- Delete AnalysedComponent Modal -->
<b-modal ref="ac-delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleAcDeleteOk" centered>
    <p>Are you sure that you want to remove this analysed component from this currency?</p>
</b-modal>

<!-- Property AddModal -->
<b-modal ref="property-add-modal" size="xl" title="Create a property for @Model.Currency.Name" ok-title="Create" v-on:ok="handlePropertyAddOk">
    <b-form v-on:submit.stop.prevent="onPropertyAddSubmit">
        <b-form-group label="Type">
            <b-form-select v-model="addPropertyForm.type">
                <option v-for="propType in currencyPropertyTypes" :value="propType.value">{{ propType.key }}</option>
            </b-form-select>
        </b-form-group>
        
        <b-form-group label="Value">
            <b-form-input
                v-model="addPropertyForm.value"
                placeholder="Enter the value">
            </b-form-input>
        </b-form-group>
        
        <b-form-checkbox v-model="addPropertyForm.isEnabled" switch>
            Enabled
        </b-form-checkbox>
    </b-form>
</b-modal>

<!-- Property EditModal -->
<b-modal ref="property-edit-modal" size="xl" title="Edit Property" ok-title="Update" v-on:ok="handlePropertyEditOk">
    <b-form v-on:submit.stop.prevent="onPropertyEditSubmit">
        <b-form-group label="Type">
            <b-form-select v-model="editPropertyForm.type">
                <option v-for="propType in currencyPropertyTypes" :value="propType.value">{{ propType.key }}</option>
            </b-form-select>
        </b-form-group>

        <b-form-group label="Value">
            <b-form-input
                v-model="editPropertyForm.value"
                required
                placeholder="Enter the value">
            </b-form-input>
        </b-form-group>

        <b-form-group>
            <b-form-checkbox v-model="editPropertyForm.isEnabled" switch>Enabled</b-form-checkbox>
        </b-form-group>
    </b-form>
</b-modal>

<!-- Delete Property Modal -->
<b-modal ref="property-delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handlePropertyDeleteOk" centered>
    <p>Are you sure that you want to remove this property from this currency?</p>
</b-modal>

@section Scripts
{
    <script>
        const vm = new Vue({
            el: '#content',
            data: {
                sourceCurrentPage: 1,
                propertiesCurrentPage: 1,
                acCurrentPage: 1,
                acDataRowsPerPage: 10,
                sourceDataRowsPerPage: 10,
                sourceDataFields: [
                    {
                        key: 'Name',
                        label: 'Name',
                        sortable: true
                    },
                    {
                        key: 'Abbreviation',
                        label: 'Abbreviation',
                        sortable: true
                    },
                    {
                        key: 'APIDocsURL',
                        label: 'API Docs URL',
                        sortable: true
                    },
                    {
                        key: 'isEnabled',
                        label: 'Is Enabled',
                        sortable: true
                    },
                    {
                        key: 'Remove',
                        label: '',
                        sortable: false
                    }
                ],
                propertyDataFields: [
                    {
                        key: 'type',
                        label: 'Type',
                        sortable: true
                    },
                    {
                        key: 'value',
                        label: 'Value',
                        sortable: false
                    },
                    {
                        key: 'isEnabled',
                        label: 'Enabled',
                        sortable: true
                    },
                    {
                        key: 'Edit',
                        label: '',
                        sortable: false
                    },
                    {
                        key: 'Remove',
                        label: '',
                        sortable: false
                    }
                ],
                acDataFields: [
                    {
                        key: 'type',
                        label: 'Type',
                        sortable: true
                    },
                    {
                        key: 'value',
                        label: 'Value',
                        sortable: false
                    },
                    {
                        key: 'isEnabled',
                        label: 'Enabled',
                        sortable: true
                    },
                    {
                        key: 'Remove',
                        label: '',
                        sortable: false
                    }
                ],
                acTypes:
                    @Html.Raw(JsonConvert.SerializeObject(@NozomiServiceConstants.analysedComponentTypes, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                analysedComponents: @Html.Raw(JsonConvert.SerializeObject(Model.Currency.AnalysedComponents, Formatting.Indented, new JsonSerializerSettings
                                    {
                                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                                    })),    
                currencySources:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Currency.CurrencySources, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencyTypes:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencyTypes, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencyPropertyTypes: 
                    @Html.Raw(JsonConvert.SerializeObject(@NozomiServiceConstants.CurrencyPropertyTypes, 
                        Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencyProperties: 
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Currency.CurrencyProperties, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                editCurrency: {
                    name: '@Model.Currency.Name',
                    abbreviation: '@Model.Currency.Abbreviation',
                    slug: '@Model.Currency.Slug',
                    currencyTypeId: @Model.Currency.CurrencyTypeId,
                    description: '@Model.Currency.Description',
                    denominationName: '@Model.Currency.DenominationName',
                    denominations: '@Model.Currency.Denominations',
                    isEnabled: @Model.Currency.IsEnabled.ToString().ToLower()
                },
                addSourceForm: {
                    currencySourcesOptions:
                        @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencySourcesOptions, Formatting.Indented, new JsonSerializerSettings
                        {
                            ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                            ContractResolver = new CamelCasePropertyNamesContractResolver()
                        })),
                    currencySourceId: '',
                },
                deleteSourceModal: {
                    id: Number,
                    name: ''
                },
                addPropertyForm: {
                    currencyId: @Model.Currency.Id,    
                    type: 0,
                    value: '',
                    isEnabled: false
                },
                editPropertyForm: {
                    id: Number,    
                    type: Number,
                    value: '',
                    isEnabled: false
                },
                deletePropertyModal: {
                    id: Number,
                    name: ''
                },
                addAcForm: {
                    currencyId: @Model.Currency.Id,    
                    componentType: 0,
                    delay: 10000,
                    uiFormatting: '',
                    isDenominated: false,
                    isEnabled: false
                },
                deleteAcModal: {
                    id: Number,
                    name: ''
                },
            },
            mounted() {
                this.convertCurrencyTypesOption();
                this.convertCurrencySourcesOption();
            },
            methods: {
                convertCurrencyTypesOption() {
                    const currencyTypesArr = [];
                    for (let i = 0; i < this.currencyTypes.length; i++) {
                        const currencyType = {
                            value: this.currencyTypes[i].id,
                            text: this.currencyTypes[i].name
                        };
                        currencyTypesArr.push(currencyType);
                    }
                    this.currencyTypes = currencyTypesArr;
                },
                convertCurrencySourcesOption() {
                    const currencySourcesArr = [];
                    for (let i = 0; i < this.addSourceForm.currencySourcesOptions.length; i++) {
                        const currencySource = {
                            value: this.addSourceForm.currencySourcesOptions[i].id,
                            text: this.addSourceForm.currencySourcesOptions[i].name
                        };
                        currencySourcesArr.push(currencySource);
                    }
                    this.addSourceForm.currencySourcesOptions = currencySourcesArr;
                },
                getCurrencyPropertyString(val) {
                    for (let i = 0; i < this.currencyPropertyTypes.length; i++) {
                        if (this.currencyPropertyTypes[i].value == val)
                            return this.currencyPropertyTypes[i].key;
                    }
                    
                    return "Unknown";
                },
                getAcString(val) {
                    for (let i = 0; i < this.acTypes.length; i++) {
                        if (this.acTypes[i].value === val)
                            return this.acTypes[i].key;
                    }
                    
                    return "Unknown";
                },
                async onEditRequestSubmit() {
                    const formData = new FormData();
                    formData.append('Id', @Model.Currency.Id);
                    formData.append('Name', this.editCurrency.name);
                    formData.append('CurrencyTypeId', this.editCurrency.currencyTypeId);
                    formData.append('Abbreviation', this.editCurrency.abbreviation);
                    formData.append('Slug', this.editCurrency.slug);
                    formData.append('Description', this.editCurrency.description);
                    formData.append('DenominationName', this.editCurrency.denominationName);
                    formData.append('Denominations', this.editCurrency.denominations);
                    formData.append('IsEnabled', this.editCurrency.isEnabled);

                    const response = await fetch('/Admin/Currency/Edit/@Model.Currency.Id',
                        {
                            method: 'PUT',
                            body: formData
                        });

                    if (response.status === 200) {
                        const data = await response.json();
                        // Put alert for now, change the ui later.
                        alert(data.message);
                        window.location.replace(`/admin/currency/currency/${this.editCurrency.slug}`);
                    } else {
                        alert(data.message);
                    }
                },
                showSourceAddModal() {
                    this.$refs['source-add-modal'].show();
                },
                showPropertyAddModal() {
                    this.$refs['property-add-modal'].show();
                },
                showAcAddModal() {
                    this.$refs['ac-add-modal'].show();
                },
                handleSourceAddOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onSourceAddSubmit();
                },
                handlePropertyAddOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onPropertyAddSubmit();
                },
                handleAcAddOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onAcAddSubmit();
                },
                async onSourceAddSubmit() {
                    let formData = new FormData();
                    formData.append('CurrencyId', @Model.Currency.Id);
                    formData.append('SourceId', this.addSourceForm.currencySourceId);

                    const response = await fetch('/Admin/CurrencySource/Create',
                        {
                            method: 'POST',
                            body: formData
                        });

                    if (response.status === 200) {
                        const data = await response.json();

                        // TODO: Refresh the UI when the source is added.

                        // Put alert for now, change the ui later.
                        alert(data.message);
                    } else {
                        alert("Create failed");
                    }
                    // Hide the modal manually
                    this.$refs['source-add-modal'].hide();
                },
                onPropertyAddSubmit() {
                    // Send a POST request
                    axios({
                      method: 'post',
                      responseType: 'application/json',
                      url: '/Admin/CurrencyProperty/Create',
                      data: this.addPropertyForm
                    })
                    .then(function (response) {
                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        alert("Create failed");
                    });
                    
                    // Hide the modal manually
                    this.$refs['property-add-modal'].hide();
                },
                onAcAddSubmit() {
                    // Send a POST request
                    axios({
                      method: 'post',
                      responseType: 'application/json',
                      url: '/Admin/AnalysedComponent/Create',
                      data: this.addAcForm
                    })
                    .then(function (response) {
                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        alert("Create failed");
                    });
                    
                    // Hide the modal manually
                    this.$refs['property-add-modal'].hide();
                },
                // Methods for delete modal
                showSourceDeleteModal(id, sourceName) {
                    this.deleteSourceModal.id = id;
                    this.deleteSourceModal.name = sourceName;

                    this.$refs['source-delete-modal'].show();
                },
                // Methods for delete modal
                showPropertyDeleteModal(id, propName) {
                    this.deletePropertyModal.id = id;
                    this.deletePropertyModal.name = propName;

                    this.$refs['property-delete-modal'].show();
                },
                // Methods for delete modal
                showAcDeleteModal(id, propName) {
                    this.deleteAcModal.id = id;
                    this.deleteAcModal.name = propName;

                    this.$refs['ac-delete-modal'].show();
                },
                async handleSourceDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();

                    const response = await fetch(`/Admin/CurrencySource/Delete/${this.deleteSourceModal.id}`,
                        {
                            method: 'DELETE'
                        });

                    if (response.status === 200) {
                        // Update the datatable
                        const index = this.currencySources.findIndex(element => element.Id === this.deleteSourceModal.id);
                        this.currencySources.splice(index, 1);

                        alert(`Successfully deleted ${this.deleteSourceModal.name}`);
                    } else {
                        alert("Delete failed");
                    }

                    this.$refs['source-delete-modal'].hide();
                },
                async handlePropertyDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();
                    console.dir(this.deletePropertyModal);
                    
                    // Send a POST request
                    axios({
                      method: 'delete',
                      url: '/Admin/CurrencyProperty/Delete/' + this.deletePropertyModal.id,
                    })
                    .then(function (response) {
                        console.log(response);
                        // Update the datatable
                        const index = this.currencyProperties.findIndex(element => element.Id === this.deletePropertyModal.id);
                        this.currencyProperties.splice(index, 1);

                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        console.log(error);
                        alert("Delete failed");
                    });
                    
                    // Hide the modal manually
                    this.$refs['property-delete-modal'].hide();
                },
                async handleAcDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();
                    console.dir(this.deleteAcModal);
                    
                    // Send a POST request
                    axios({
                      method: 'delete',
                      url: '/Admin/AnalysedComponent/Delete/' + this.deleteAcModal.id,
                    })
                    .then(function (response) {
                        console.log(response);
                        
                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        console.log(error);
                        alert("Delete failed");
                    });
                    
                    // Hide the modal manually
                    this.$refs['ac-delete-modal'].hide();
                },
                // Methods for property edit modal
                showPropertyEditModal(property) {
                    this.editPropertyForm.id = property.id;
                    this.editPropertyForm.type = property.type;
                    this.editPropertyForm.value = property.value === null ? '' : property.value;
                    this.editPropertyForm.isEnabled = property.isEnabled;
                    
                    this.$refs['property-edit-modal'].show();
                },
                handlePropertyEditOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onPropertyEditSubmit();
                },
                async onPropertyEditSubmit() {
                    // let formData = new FormData();
                    // formData.append('Id', this.editPropertyForm.id);
                    // formData.append('Type', this.editPropertyForm.type);
                    // formData.append('Value', this.editPropertyForm.value);
                    // formData.append('IsEnabled', this.editPropertyForm.isEnabled);

                    axios({
                        method: 'put',
                        url: '/Admin/CurrencyProperty/Update/',
                        data: this.editPropertyForm
                    })
                    .then(function (response) {
                        console.log(response);
                        
                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        console.log(error);
                        alert("Update failed");
                    });

                    // Hide the modal manually
                    this.$refs['property-edit-modal'].hide();
                }
            }
        });
    </script>
}