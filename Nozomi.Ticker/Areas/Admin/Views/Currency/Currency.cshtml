@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model Nozomi.Data.ViewModels.Admin.Currency.CurrencyViewModel

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">@Model.Currency.Name</h3>

        <b-form v-on:submit.prevent="onEditRequestSubmit">
            <div class="col-md-4 mb-3">
                <b-form-group label="Currency name">
                    <b-form-input
                        v-model="editCurrency.name"
                        placeholder="Enter currency name">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Currency Abbreviation">
                    <b-form-input
                        v-model="editCurrency.abbreviation"
                        placeholder="Enter currency abbreviation">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Slug">
                    <b-form-input
                        v-model="editCurrency.slug"
                        placeholder="Enter slug">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Currency Type" label-for="currencyType-input">
                    <b-form-select v-model="editCurrency.currencyTypeId" :options="currencyTypes"></b-form-select>
                </b-form-group>

                <b-form-group label="Description">
                    <b-form-textarea
                        v-model="editCurrency.description"
                        placeholder="Enter description (optional)">
                    </b-form-textarea>
                </b-form-group>

                <b-form-group label="Denomination Name">
                    <b-form-input
                        v-model="editCurrency.denominationName"
                        placeholder="Enter denomination name">
                    </b-form-input>
                </b-form-group>

                <b-form-group label="Denomination">
                    <b-form-input
                        v-model="editCurrency.denomination"
                        placeholder="Enter denomination">
                    </b-form-input>
                </b-form-group>

                <b-form-group id="isEnabled-input-group">
                    <b-form-checkbox v-model="editCurrency.isEnabled">Is Enabled</b-form-checkbox>
                </b-form-group>
            </div>

            <b-button variant="primary" class="mb-3" type="submit">Save Changes</b-button>
        </b-form>

        <hr/>

        <h3>Sources in @Model.Currency.Name</h3>
        <!-- Currency source table -->
        <b-button variant="primary" class="mb-3" v-on:click="showSourceAddModal">Add Source</b-button>

        <b-table
            :per-page="sourceDataRowsPerPage" :current-page="sourceCurrentPage"
            :items="currencySources" :fields="sourceDataFields">
            <template slot="Name" slot-scope="datum">
                {{ datum.item.source.name }}
            </template>
            <template slot="Abbreviation" slot-scope="datum">
                {{ datum.item.source.abbreviation }}
            </template>
            <template slot="APIDocsURL" slot-scope="datum">
                <a :href="datum.item.apiDocsURL">{{ datum.item.source.apiDocsURL }}</a>
            </template>
            <template slot="isEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.source.isEnabled" disabled/>
            </template>
            <template slot="Remove" slot-scope="datum">
                <b-button variant="danger" v-on:click="showSourceDeleteModal(datum.item.id, datum.item.source.name)">Remove</b-button>
            </template>
        </b-table>
    </div>
</div>

<!-- Source AddModal -->
<b-modal ref="source-add-modal" size="xl" title="Add source to @Model.Currency.Name" ok-title="Create" v-on:ok="handleSourceAddOk">
    <b-form v-on:submit.stop.prevent="onSourceAddSubmit">
        <b-form-group label="Currency source">
            <b-form-select v-model="addSourceForm.currencySourceId" :options="addSourceForm.currencySourcesOptions"></b-form-select>
        </b-form-group>
    </b-form>
</b-modal>

<!-- DeleteModal -->
<b-modal ref="source-delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleSourceDeleteOk" centered>
    <p>Are you sure that you want to remove {{ deleteSourceModal.name }} source from this currency?</p>
</b-modal>

@section Scripts
{
    <script>
        const vm = new Vue({
            el: '#content',
            data: {
                sourceCurrentPage: 1,
                sourceDataRowsPerPage: 10,
                sourceDataFields: [
                    {
                        key: 'Name',
                        label: 'Name',
                        sortable: true
                    },
                    {
                        key: 'Abbreviation',
                        label: 'Abbreviation',
                        sortable: true
                    },
                    {
                        key: 'APIDocsURL',
                        label: 'API Docs URL',
                        sortable: true
                    },
                    {
                        key: 'isEnabled',
                        label: 'Is Enabled',
                        sortable: true
                    },
                    {
                        key: 'Remove',
                        label: '',
                        sortable: false
                    }
                ],
                currencySources:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Currency.CurrencySources, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencyTypes:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencyTypes, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                editCurrency: {
                    name: '@Model.Currency.Name',
                    abbreviation: '@Model.Currency.Abbreviation',
                    slug: '@Model.Currency.Slug',
                    currencyTypeId: @Model.Currency.CurrencyTypeId,
                    description: '@Model.Currency.Description',
                    denominationName: '@Model.Currency.DenominationName',
                    denominations: '@Model.Currency.Denominations',
                    isEnabled: @Model.Currency.IsEnabled.ToString().ToLower()
                },
                addSourceForm: {
                    currencySourcesOptions:
                        @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencySourcesOptions, Formatting.Indented, new JsonSerializerSettings
                        {
                            ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                            ContractResolver = new CamelCasePropertyNamesContractResolver()
                        })),
                    currencySourceId: '',
                },
                deleteSourceModal: {
                    id: Number,
                    name: ''
                },
            },
            mounted() {
                this.convertCurrencyTypesOption();
                this.convertCurrencySourcesOption();
            },
            methods: {
                convertCurrencyTypesOption() {
                    const currencyTypesArr = [];
                    for (let i = 0; i < this.currencyTypes.length; i++) {
                        const currencyType = {
                            value: this.currencyTypes[i].id,
                            text: this.currencyTypes[i].name
                        };
                        currencyTypesArr.push(currencyType);
                    }
                    this.currencyTypes = currencyTypesArr;
                },
                convertCurrencySourcesOption() {
                    const currencySourcesArr = [];
                    for (let i = 0; i < this.addSourceForm.currencySourcesOptions.length; i++) {
                        const currencySource = {
                            value: this.addSourceForm.currencySourcesOptions[i].id,
                            text: this.addSourceForm.currencySourcesOptions[i].name
                        };
                        currencySourcesArr.push(currencySource);
                    }
                    this.addSourceForm.currencySourcesOptions = currencySourcesArr;
                },
                async onEditRequestSubmit() {
                    const formData = new FormData();
                    formData.append('Id', @Model.Currency.Id);
                    formData.append('Name', this.editCurrency.name);
                    formData.append('CurrencyTypeId', this.editCurrency.currencyTypeId);
                    formData.append('Abbreviation', this.editCurrency.abbreviation);
                    formData.append('Slug', this.editCurrency.slug);
                    formData.append('Description', this.editCurrency.description);
                    formData.append('DenominationName', this.editCurrency.denominationName);
                    formData.append('Denominations', this.editCurrency.denominations);
                    formData.append('IsEnabled', this.editCurrency.isEnabled);

                    const response = await fetch('/Admin/Currency/Edit/@Model.Currency.Id',
                        {
                            method: 'PUT',
                            body: formData
                        });

                    if (response.status === 200) {
                        const data = await response.json();
                        // Put alert for now, change the ui later.
                        alert(data.message);
                        window.location.replace(`/admin/currency/currency/${this.editCurrency.slug}`);
                    } else {
                        alert(data.message);
                    }
                },
                showSourceAddModal() {
                    this.$refs['source-add-modal'].show();
                },
                handleSourceAddOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onSourceAddSubmit();
                },
                async onSourceAddSubmit() {
                    var formData = new FormData();
                    formData.append('CurrencyId', @Model.Currency.Id);
                    formData.append('SourceId', this.addSourceForm.id);

                    const response = await fetch('/Admin/CurrencySource/Create',
                        {
                            method: 'POST',
                            body: formData
                        });

                    if (response.status === 200) {
                        const data = await response.json();

                        // TODO: Refresh the UI when the source is added.

                        // Put alert for now, change the ui later.
                        alert(data.message);
                    } else {
                        alert("Create failed");
                    }
                    // Hide the modal manually
                    this.$refs['create-modal'].hide();
                },
                // Methods for delete modal
                showSourceDeleteModal(id, sourceName) {
                    this.deleteSourceModal.id = id;
                    this.deleteSourceModal.name = sourceName;

                    this.$refs['source-delete-modal'].show();
                },
                async handleSourceDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();

                    const response = await fetch(`/Admin/CurrencySource/Delete/${this.deleteSourceModal.id}`,
                        {
                            method: 'DELETE'
                        });

                    if (response.status === 200) {
                        // Update the datatable
                        const index = this.currencySources.findIndex(element => element.Id === this.deleteSourceModal.id);
                        this.currencySources.splice(index, 1);

                        alert(`Successfully deleted ${this.deleteSourceModal.name}`);
                    } else {
                        alert("Delete failed");
                    }

                    this.$refs['source-delete-modal'].hide();
                }
            }
        });
    </script>
}