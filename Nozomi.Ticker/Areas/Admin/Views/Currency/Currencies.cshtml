@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model Nozomi.Base.Identity.ViewModels.Manage.Currency.CurrenciesViewModel

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">Currencies</h3>

        <b-button variant="primary" class="mb-3" v-on:click="showCreateModal">Create</b-button>

        <b-table :items="currencies" :per-page="perPage" :current-page="currentPage" :fields="dataFields">
            <template slot="Name" slot-scope="datum">
                {{ datum.item.name }}
            </template>
            <template slot="Abbreviation" slot-scope="datum">
                {{ datum.item.abbreviation }}
            </template>
            <template slot="CurrencyType" slot-scope="datum">
                {{ datum.item.currencyType.name }}
            </template>
            <template slot="CurrencySource" slot-scope="datum">
                {{ datum.item.sourceCount }}
            </template>
            <template slot="Description" slot-scope="datum">
                {{ datum.item.description }}
            </template>
            <template slot="isEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.isEnabled" disabled/>
            </template>
            <template slot="View" slot-scope="datum">
                <b-button variant="primary" :href="'currency/' + datum.item.abbreviation">
                    View
                </b-button>
            </template>
            <template slot="Delete" slot-scope="datum">
                <b-button variant="danger" v-on:click="showDeleteModal(datum.item.id, datum.item.name)">Delete</b-button>
            </template>
        </b-table>

        <b-pagination
            v-model="currentPage"
            :total-rows="rows"
            :per-page="perPage"
            aria-controls="currency-table">
        </b-pagination>
    </div>
</div>

<!-- CreateModal -->
<b-modal ref="create-modal" size="xl" title="Create Currency" ok-title="Create" v-on:ok="handleCreateOk">
    <b-form v-on:submit.stop.prevent="onCreateSubmit">
        <b-form-group
            label="Name"
            label-for="currencyName-input">
            <b-form-input
                v-model="createForm.currencyName"
                required
                placeholder="Enter currency name">
            </b-form-input>
        </b-form-group>

        <b-form-group
            label="Abbreviation"
            label-for="abbreviation-input">
            <b-form-input
                v-model="createForm.abbreviation"
                required
                placeholder="Enter source abbreviation">
            </b-form-input>
        </b-form-group>

        <b-form-group label="Currency Type" label-for="currencyType-input">
            <b-form-select v-model="createForm.currencyTypeId" :options="currencyTypes"></b-form-select>
        </b-form-group>

        <b-form-group label="Currency source">
            <b-form-select v-model="createForm.currencySourceId" :options="currencySources"></b-form-select>
        </b-form-group>

        <b-form-group label="Description">
            <b-form-textarea v-model="createForm.description" rows="3"></b-form-textarea>
        </b-form-group>

        <b-form-group>
            <b-form-checkbox v-model="createForm.isEnabled">Is Enabled</b-form-checkbox>
        </b-form-group>
    </b-form>
</b-modal>

<!-- DeleteModal -->
<b-modal ref="delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleDeleteOk" centered>
    <p>Are you sure that you want to delete {{ deleteModal.name }}?</p>
</b-modal>

@section Scripts {
    <script>
        const vm = new Vue({
            // options
            el: "#content",
            // Just dish any random variable in for now
            data: {
                perPage: 10,
                currentPage: 1,
                dataFields: [
                    {
                        key: 'Name',
                        label: 'Name',
                        sortable: true
                    }, 
                    {
                        key: 'Abbreviation',
                        label: 'Abbreviation',
                        sortable: true
                    }, 
                    {
                        key: 'CurrencyType',
                        label: 'Currency Type',
                        sortable: true
                    }, 
                    {
                        key: 'CurrencySource',
                        label: 'No. Of Sources',
                        sortable: true
                    }, 
                    {
                        key: 'Description',
                        label: 'Description',
                        sortable: true
                    },
                    {
                        key: 'isEnabled',
                        label: 'Is Enabled',
                        sortable: true
                    },
                    {
                        key: 'View',
                        label: '',
                        sortable: false
                    }, {
                        key: 'Delete',
                        label: '',
                        sortable: false
                    }
                ],
                // https://stackoverflow.com/questions/7397207/json-net-error-self-referencing-loop-detected-for-type
                currencies:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.Currencies, Formatting.Indented, new JsonSerializerSettings
                    {
                        // Converts data to camelCase
                        ContractResolver = new CamelCasePropertyNamesContractResolver(),
                    })),
                currencyTypes:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencyTypes, Formatting.Indented, new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                currencySources:
                    @Html.Raw(JsonConvert.SerializeObject(@Model.CurrencySources, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                createForm: {
                    currencyTypeId: Number,
                    abbreviation: '',
                    description: '',
                    currencyName: '',
                    currencySourceId: '',
                    isEnabled: Boolean,
                },
                deleteModal: {
                    id: Number,
                    name: ''
                },
            },
            mounted() {
                this.convertCurrencyTypesOption();
                this.convertCurrencySourcesOption();
            },
            methods: {
                convertCurrencyTypesOption() {
                    const currencyTypesArr = [];
                    for (let i = 0; i < this.currencyTypes.length; i++) {
                        const currencyType = {
                            value: this.currencyTypes[i].id,
                            text: this.currencyTypes[i].name
                        };
                        currencyTypesArr.push(currencyType);
                    }
                    this.currencyTypes = currencyTypesArr;
                },
                convertCurrencySourcesOption() {
                    const currencySourcesArr = [];
                    for (let i = 0; i < this.currencySources.length; i++) {
                        const currencySource = {
                            value: this.currencySources[i].id,
                            text: this.currencySources[i].name
                        };
                        currencySourcesArr.push(currencySource);
                    }
                    this.currencySources = currencySourcesArr;
                },
                showCreateModal() {
                    this.$refs['create-modal'].show();
                },
                handleCreateOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onCreateSubmit();
                },
                async onCreateSubmit() {
                    const formData = new FormData();
                    formData.append('Id', this.createForm.id);
                    formData.append('CurrencyTypeId', this.createForm.currencyTypeId);
                    formData.append('Abbreviation', this.createForm.abbreviation);
                    formData.append('Description', this.createForm.description);
                    formData.append('Name', this.createForm.currencyName);
                    formData.append('CurrencySourceId', this.createForm.currencySourceId);
                    formData.append('IsEnabled', this.createForm.isEnabled);

                    const response = await fetch('/Admin/Currency/CreateCurrency',
                        {
                            method: 'POST',
                            body: formData
                        });

                    if (response.status === 200) {
                        const data = await response.json();

                        const newCurrency = data.item;

                        // Insert the currencyType and source here manually instead of calling api again
                        newCurrency.currencyType = {
                            name: this.getCurrencyTypeName(this.createForm.currencyTypeId)
                        }
                        newCurrency.currencySource =
                        {
                            name: this.getCurrencySourceName(this.createForm.currencySourceId)
                        }

                        this.currencies.push(newCurrency);
                        // Put alert for now, change the ui later.
                        alert(data.message);
                    } else {
                        alert("Create failed");
                    }
                    // Hide the modal manually
                    this.$refs['create-modal'].hide();
                },
                // Methods for delete modal
                showDeleteModal(id, currencyName) {
                    this.deleteModal.id = id;
                    this.deleteModal.name = currencyName;

                    this.$refs['delete-modal'].show();
                },
                async handleDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();

                    const response = await fetch(`/Admin/Currency/DeleteCurrency/${this.deleteModal.id}`,
                        {
                            method: 'DELETE'
                        });

                    if (response.status === 200) {
                        // Update the datatable
                        const index = this.currencies.findIndex(element => element.Id === this.deleteModal.id);
                        this.currencies.splice(index, 1);

                        alert(`Successfully deleted ${this.deleteModal.name}`);
                    } else {
                        alert("Delete failed");
                    }

                    this.$refs['delete-modal'].hide();
                },
                getCurrencyTypeName(id) {
                    for (let i = 0; i < this.currencyTypes.length; i++) {
                        if (this.currencyTypes.value === id)
                            return this.currencyTypes.text;
                    }
                },
                getCurrencySourceName(id) {
                    for (let i = 0; i < this.currencySources.length; i++) {
                        if (this.currencySources.value === id)
                            return this.currencySources.text;
                    }
                },
            },
            computed: {
                rows() {
                    return this.currencies.length;
                }
            }
        });
    </script>
}