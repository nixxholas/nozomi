@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using Nozomi.Preprocessing
@model Nozomi.Data.Models.Currency.CurrencyType

<!-- Content Section -->
    <div class="bg-light">
      <div class="container space-2">
        <!-- Personal Info Form -->
        <form class="js-validate pb-8">
          <div class="row">
            <input type="hidden" asp-for="Id" />
            
            <!-- Input -->
            <div class="col-sm-6 mb-6">
              <div class="js-form-message">
                <label asp-for="Name" class="form-label"></label>

                <div class="form-group">
                  <input type="text" class="form-control" name="name" placeholder="Enter your name"
                         asp-for="Name" aria-label="Enter your name" required
                         data-msg="Please enter your name."
                         data-error-class="u-has-error"
                         data-success-class="u-has-success">
                </div>
              </div>
            </div>
            <!-- End Input -->

            <!-- Input -->
            <div class="col-sm-6 mb-6">
              <div class="js-form-message">
                <label asp-for="TypeShortForm" class="form-label"></label>

                <div class="form-group">
                  <input type="text" class="form-control" name="username" placeholder="Enter your username"
                         asp-for="TypeShortForm" aria-label="Enter your username" required
                         data-msg="Please enter your username."
                         data-error-class="u-has-error"
                         data-success-class="u-has-success">
                </div>
              </div>
            </div>
            <!-- End Input -->
          </div>

          <!-- Buttons -->
          <button type="submit" class="btn btn-sm btn-primary transition-3d-hover mr-1">Save Changes</button>
          <a class="btn btn-sm btn-soft-secondary transition-3d-hover"
                  asp-area="Admin" asp-controller="CurrencyType" asp-action="CurrencyTypes">Cancel</a>
          <!-- End Buttons -->
        </form>
        <!-- End Personal Info Form -->
        
        <h3>Analysed Components</h3>
        <!-- Currency AC table -->
        <b-button variant="primary" class="mb-3" v-on:click="showAcAddModal">Create Analysed Component</b-button>
        <b-table v-if="analysedComponents != null && analysedComponents.length > 0"
                 :per-page="acDataRowsPerPage" :current-page="acCurrentPage"
                 :items="analysedComponents" :fields="acDataFields">
            <template slot="type" slot-scope="datum">
                {{ getAcString(datum.item.componentType) }}
            </template>
            <template slot="value" slot-scope="datum">
                {{ datum.item.value }}
            </template>
            <template slot="isEnabled" slot-scope="datum">
                <b-form-checkbox v-model="datum.item.isEnabled" disabled/>
            </template>
            <template slot="Remove" slot-scope="datum">
                <b-button variant="danger" v-on:click="showAcDeleteModal(datum.item.id)" 
                          v-if="datum.item.deletedAt === null">Remove</b-button>
            </template>
        </b-table>
      </div>
    </div>
<!-- End Content Section -->

<!-- AnalysedComponent AddModal -->
<b-modal ref="ac-add-modal" size="xl" title="Create an Analysed Component for @Model.Name" ok-title="Create" v-on:ok="handleAcAddOk">
    <b-form v-on:submit.stop.prevent="onAcAddSubmit">
        <b-form-group label="Type">
            <b-form-select v-model="addAcForm.componentType">
                <option v-for="acType in acTypes" :value="acType.value">{{ acType.key }}</option>
            </b-form-select>
        </b-form-group>
        
        <b-form-group label="UI Formatting">
            <b-form-input
                v-model="addAcForm.uiFormatting">
            </b-form-input>
        </b-form-group>
        
        <b-form-group label="Delay">
            <b-form-input
                v-model="addAcForm.delay">
            </b-form-input>
        </b-form-group>
        
        <b-form-checkbox v-model="addAcForm.isDenominated" switch>
            Denominated
        </b-form-checkbox>
        
        <b-form-checkbox v-model="addAcForm.isEnabled" switch>
            Enabled
        </b-form-checkbox>
    </b-form>
</b-modal>

<!-- Delete AnalysedComponent Modal -->
<b-modal ref="ac-delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleAcDeleteOk" centered>
    <p>Are you sure that you want to remove this analysed component from this currency?</p>
</b-modal>

@section Scripts
{
    <script>
        const vm = new Vue({
            el: '#content',
            data: {
                acCurrentPage: 1,
                acDataRowsPerPage: 10,
                acDataFields: [
                    {
                        key: 'type',
                        label: 'Type',
                        sortable: true
                    },
                    {
                        key: 'value',
                        label: 'Value',
                        sortable: false
                    },
                    {
                        key: 'isEnabled',
                        label: 'Enabled',
                        sortable: true
                    },
                    {
                        key: 'Remove',
                        label: '',
                        sortable: false
                    }
                ],
                acTypes:
                    @Html.Raw(JsonConvert.SerializeObject(@NozomiServiceConstants.analysedComponentTypes, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                analysedComponents: 
                    @Html.Raw(JsonConvert.SerializeObject(Model.AnalysedComponents, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    })),
                addAcForm: {
                    currencyId: @Model.Id,    
                    componentType: 0,
                    delay: 10000,
                    uiFormatting: '',
                    isDenominated: false,
                    isEnabled: false
                },
                deleteAcModal: {
                    id: Number,
                    name: ''
                },
            },
            methods: {
                getAcString(val) {
                    for (let i = 0; i < this.acTypes.length; i++) {
                        if (this.acTypes[i].value === val)
                            return this.acTypes[i].key;
                    }
                    
                    return "Unknown";
                },
                showAcAddModal() {
                    this.$refs['ac-add-modal'].show();
                },
                handleAcAddOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onAcAddSubmit();
                },
                onAcAddSubmit() {
                    // Send a POST request
                    axios({
                      method: 'post',
                      responseType: 'application/json',
                      url: '/Admin/AnalysedComponent/Create',
                      data: this.addAcForm
                    })
                    .then(function (response) {
                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        alert("Create failed");
                    });
                    
                    // Hide the modal manually
                    this.$refs['property-add-modal'].hide();
                },
                // Methods for delete modal
                showAcDeleteModal(id) {
                    this.deleteAcModal.id = id;

                    this.$refs['ac-delete-modal'].show();
                },
                async handleAcDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();
                    console.dir(this.deleteAcModal);
                    
                    // Send a POST request
                    axios({
                      method: 'delete',
                      url: '/Admin/AnalysedComponent/Delete/' + this.deleteAcModal.id,
                    })
                    .then(function (response) {
                        console.log(response);
                        
                        // Put alert for now, change the ui later.
                        alert(response.data.message);
                    })
                    .catch(function (error) {
                        console.log(error);
                        alert("Delete failed");
                    });
                    
                    // Hide the modal manually
                    this.$refs['ac-delete-modal'].hide();
                }
            }
        });
    </script>
}