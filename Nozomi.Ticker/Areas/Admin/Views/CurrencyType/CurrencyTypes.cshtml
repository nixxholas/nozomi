@model ICollection<Nozomi.Data.Models.Currency.CurrencyType>

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">Currency Types</h3>

        <b-button variant="primary" class="mb-3" v-on:click="showCreateModal">Create</b-button>

        <b-table :items="currencyTypes" :fields="dataFields">
            <template slot="name" slot-scope="datum">
                {{ datum.item.name }}
            </template>
            <template slot="typeShortForm" slot-scope="datum">
                {{ datum.item.typeShortForm }}
            </template>
            <template slot="Edit" slot-scope="datum">
                <b-button variant="primary" :href="'edit/' + datum.item.id">Edit</b-button>
            </template>
            <template slot="Delete" slot-scope="datum">
                <b-button variant="danger" v-on:click="showDeleteModal(datum.item.id, datum.item.name)">Delete</b-button>
            </template>
        </b-table>
    </div>
</div>


<!-- CreateModal -->
<b-modal ref="create-modal" size="xl" title="Create Type" ok-title="Create" v-on:ok="handleCreateOk">
    <b-form v-on:submit.stop.prevent="onCreateSubmit">
        <b-form-group label="Name">
            <b-form-input
                :v-model="createForm.name"
                placeholder="Metals">
            </b-form-input>
        </b-form-group>

        <b-form-group label="Abbreviation (Type Short Form)">
            <b-form-input
                :v-model="createForm.typeShortForm"
                placeholder="METALS">
            </b-form-input>
        </b-form-group>
    </b-form>
</b-modal>

<!-- DeleteModal -->
<b-modal ref="delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleDeleteOk" centered>
    <p>Are you sure that you want to delete {{ deleteModal.name }}?</p>
</b-modal>

@section Scripts {
    <script>
        const vm = new Vue({
            // options
            el: "#content",
            // Just dish any random variable in for now
            data: {
                dataFields: [
                    {
                        key: 'name',
                        label: 'Name',
                        sortable: true
                    },
                    {
                        key: 'typeShortForm',
                        label: 'Abbreviation',
                        sortable: true
                    },
                    {
                        key: 'Edit',
                        label: '',
                        sortable: false
                    },
                    {
                        key: 'Delete',
                        label: '',
                        sortable: false
                    }
                ],
                currencyTypes: @Html.Raw(Json.Serialize(@Model)),
                createForm: {
                    name: "",
                    typeShortForm: ""
                },
                deleteModal: {
                    id: Number,
                    name: ''
                }
            },
            methods: {
                showCreateModal() {
                    this.$refs['create-modal'].show();
                },
                handleCreateOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onCreateSubmit();
                },
                async onCreateSubmit() {
                    let formData = new FormData();
                    formData.append('Name', this.createForm.name);
                    formData.append('TypeShortForm', this.createForm.typeShortForm);

                    const response = await fetch('/Admin/CurrencyType/Create',
                        {
                            method: 'POST',
                            body: formData
                        });

                    if (response.status === 200) {
                        // Put alert for now, change the ui later.
                        alert("Successfully created currency type!");

                    } else {
                        alert("Create failed");
                    }

                    // Hide the modal manually
                    this.$refs['create-modal'].hide();

                    // Reload for now. Controller to return the currency object then push into table.
                    location.reload(this);

                },
                // Methods for delete modal
                showDeleteModal(id, requestName) {
                    this.deleteModal.id = id;
                    this.deleteModal.name = requestName;

                    this.$refs['delete-modal'].show();
                },
                async handleDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();

                    const response = await fetch(`/Admin/CurrencyType/Delete/${this.deleteModal.id}`,
                        {
                            method: 'DELETE'
                        });

                    if (response.status === 200) {
                        const data = await response.json();
                        
                        // Update the datatable
                        const index = this.requests.findIndex(element => element.Id === this.deleteModal.id);
                        this.requests.splice(index, 1);

                        alert(data.message);
                    } else {
                        alert("Delete failed");
                    }

                    this.$refs['delete-modal'].hide();
                }
            }
        });
    </script>
}