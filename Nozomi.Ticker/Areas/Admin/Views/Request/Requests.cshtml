@using Newtonsoft.Json
@using Nozomi.Preprocessing
@using Nozomi.Service.Events.Interfaces
@model Nozomi.Ticker.Areas.Admin.Controllers.Request.RequestsViewModel

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">Requests</h3>

        <b-button variant="primary" class="mb-3" v-on:click="showCreateModal">Create</b-button>

        <b-table :items="requests" :fields="dataFields">
            <template slot="RequestType" slot-scope="datum">
                {{ getRequestTypeStr(datum.item.RequestType) }}
            </template>
            <template slot="ResponseType" slot-scope="datum">
                {{ getResponseTypeStr(datum.item.ResponseType) }}
            </template>
            <template slot="DataPath" slot-scope="datum">
                <a :href="datum.item.DataPath">{{ datum.item.DataPath }}</a>
            </template>
            <!-- Seems like momentjs can't support what we want lol https://github.com/moment/moment/issues/348 -->
            <template slot="Delay" slot-scope="datum">
                {{ moment.duration(datum.item.Delay, 'SSS').humanize() }}
            </template>
            <template slot="FailureDelay" slot-scope="datum">
                {{ moment.duration(datum.item.FailureDelay, 'SSS').humanize() }}
            </template>
            <template slot="View" slot-scope="datum">
                <b-button variant="primary" :href="'request/' + datum.item.Id">Edit</b-button>
            </template>
            <template slot="Delete" slot-scope="datum">
                <b-button variant="danger" v-on:click="showDeleteModal(datum.item.Id, datum.item.Name)">Delete</b-button>
            </template>
        </b-table>
    </div>
</div>


<!-- CreateModal -->
<b-modal ref="create-modal" size="xl" title="Create Request" ok-title="Create" v-on:ok="handleCreateOk">
    <b-form v-on:submit.stop.prevent="onCreateSubmit">
        <b-form-group label="Data path">
            <b-form-input
                type="url"
                v-model="createForm.dataPath"
                placeholder="Enter data path">
            </b-form-input>
        </b-form-group>

        <b-form-group label="Frequency(Milliseconds)">
            <b-form-input
                v-model="createForm.delay"
                placeholder="Enter frequency">
            </b-form-input>
        </b-form-group>

        <b-form-group id="requestType-input-group" label="Request Type">
            <b-form-select v-model="createForm.requestType" :options="requestTypes"></b-form-select>
        </b-form-group>

        <b-form-group id="responseType-input-group" label="Response Type">
            <b-form-select v-model="createForm.responseType" :options="responseTypes"></b-form-select>
        </b-form-group>
    </b-form>
</b-modal>

<!-- DeleteModal -->
<b-modal ref="delete-modal" title="Confirm Delete" ok-title="Yes" ok-variant="danger" cancel-title="No" v-on:ok="handleDeleteOk" centered>
    <p>Are you sure that you want to delete {{ deleteModal.name }}?</p>
</b-modal>

@section Scripts {
    <script>
        const vm = new Vue({
            // options
            el: "#content",
            // Just dish any random variable in for now
            data: {
                dataFields: [
                    {
                        key: 'RequestType',
                        label: 'Request Type',
                        sortable: true
                    },
                    {
                        key: 'ResponseType',
                        label: 'Response Type',
                        sortable: true
                    },
                    {
                        key: 'DataPath',
                        label: 'Data Path',
                        sortable: false
                    },
                    {
                        key: 'Delay',
                        label: 'Delay',
                        sortable: true
                    },
                    {
                        key: 'FailureDelay',
                        label: 'Post-failure Delay',
                        sortable: true
                    },
                    {
                        key: 'View',
                        label: '',
                        sortable: false
                    },
                    {
                        key: 'Delete',
                        label: '',
                        sortable: false
                    }
                ],
                requests: @Html.Raw(JsonConvert.SerializeObject(@Model.Requests)),
                requestTypes: @Html.Raw(Json.Serialize(@Model.RequestTypes)),
                responseTypes: @Html.Raw(Json.Serialize(@Model.ResponseTypes)),
                createForm: {
                    requestType: Number,
                    responseType: Number,
                    dataPath: '',
                    delay: ''
                },
                deleteModal: {
                    id: Number,
                    name: ''
                }
            },
            methods: {
                showCreateModal() {
                    this.$refs['create-modal'].show();
                },
                handleCreateOk(bvModalEvt) {
                    // Prevent modal from closing
                    bvModalEvt.preventDefault();
                    // Trigger submit handler
                    this.onCreateSubmit();
                },
                async onCreateSubmit() {
                    var formData = new FormData();
                    formData.append('RequestType', this.createForm.requestType);
                    formData.append('ResponseType', this.createForm.responseType);
                    formData.append('DataPath', this.createForm.dataPath);
                    formData.append('Delay', this.createForm.delay);

                    const response = await fetch('/Admin/Request/CreateRequest',
                        {
                            method: 'POST',
                            body: formData
                        });

                    if (response.status === 200) {
                        // Put alert for now, change the ui later.
                        alert("Successfully created request");

                    } else {
                        alert("Create failed");
                    }

                    // Hide the modal manually
                    this.$refs['create-modal'].hide();

                    // Reload for now. Controller to return the currency object then push into table.
                    location.reload(this);

                },
                // Methods for delete modal
                showDeleteModal(id, requestName) {
                    this.deleteModal.id = id;
                    this.deleteModal.name = requestName;

                    this.$refs['delete-modal'].show();
                },
                async handleDeleteOk(bvModalEvt) {
                    bvModalEvt.preventDefault();

                    const response = await fetch(`/Admin/Request/DeleteRequest/${this.deleteModal.id}`,
                        {
                            method: 'DELETE'
                        });

                    if (response.status === 200) {
                        const data = await response.json();
                        
                        // Update the datatable
                        const index = this.requests.findIndex(element => element.Id === this.deleteModal.id);
                        this.requests.splice(index, 1);

                        alert(data.message);
                    } else {
                        alert("Delete failed");
                    }

                    this.$refs['delete-modal'].hide();
                },
                getRequestTypeStr(val) {
                    if (this.requestTypes != null) {
                        for (i = 0; i < this.requestTypes.length; i++) {
                            if (this.requestTypes[i].value === val) {
                                return this.requestTypes[i].text;
                            }
                        }
                    }
                    return null;
                },
                getResponseTypeStr(val) {
                    if (this.responseTypes != null) {
                        for (let i = 0; i < this.responseTypes.length; i++) {
                            if (this.responseTypes[i].value === val) {
                                return this.responseTypes[i].text;
                            }
                        }
                    }
                    return null;
                },
                convertRequestTypesOption() {
                    var requestTypesArr = [];
                    for (var i = 0; i < this.requestTypes.length; i++) {
                        var requestType = {
                            value: this.requestTypes[i].value,
                            text: this.requestTypes[i].key
                        };
                        requestTypesArr.push(requestType);
                    }
                    this.requestTypes = requestTypesArr;
                },
                convertResponseTypesOption() {
                    var responseTypesArr = [];
                    for (var i = 0; i < this.responseTypes.length; i++) {
                        var responseType = {
                            value: this.responseTypes[i].value,
                            text: this.responseTypes[i].key
                        };
                        responseTypesArr.push(responseType);
                    }
                    this.responseTypes = responseTypesArr;
                }
            },
            mounted: function() {
                this.convertRequestTypesOption();
                this.convertResponseTypesOption();
            }
        });
    </script>
}