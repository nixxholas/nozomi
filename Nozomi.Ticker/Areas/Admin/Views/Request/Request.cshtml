@using Newtonsoft.Json
@using Nozomi.Base.Core.Helpers.Enumerator
@using Nozomi.Preprocessing
@model Nozomi.Base.Identity.ViewModels.Manage.Request.RequestViewModel

@{
    int requestType = (int) Model.Request.RequestType;
    int responseType = (int) Model.Request.ResponseType;
}

<!-- Content Section -->
<div class="bg-light">
    <div class="container space-2">
        <h3 class="mb-6">Request</h3>

        <b-form v-on:submit.prevent="onEditRequestSubmit">
            <div class="row">
                <div class="col-md-4 mb-3">
                    <b-form-group label="Data path">
                        <b-form-input
                            type="url"
                            v-model="editRequest.dataPath"
                            placeholder="Enter data path">
                        </b-form-input>
                    </b-form-group>

                    <b-form-group label="Frequency(Milliseconds)">
                        <b-form-input
                            v-model="editRequest.delay"
                            placeholder="Enter frequency">
                        </b-form-input>
                    </b-form-group>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <b-form-group id="requestType-input-group" label="Request Type">
                        <b-form-select v-model="editRequest.requestType" :options="requestTypes"></b-form-select>
                    </b-form-group>

                    <b-form-group id="responseType-input-group" label="Response Type">
                        <b-form-select v-model="editRequest.responseType" :options="responseTypes"></b-form-select>
                    </b-form-group>
                    <b-form-group id="isEnabled-input-group">
                        <b-form-checkbox v-model="editRequest.isEnabled">Is Enabled</b-form-checkbox>
                    </b-form-group>
                </div>
            </div>

            <b-button variant="primary" class="mb-3" type="submit">Save Changes</b-button>
        </b-form>

        <hr/>

        <h3 class="mb-6">Analysed Component</h3>
        @* Table for analysedComponent *@
        <b-table :items="request.AnalysedComponents" :fields="analysedComponentsDataFields">
            <template slot="AnalysedComponentType" slot-scope="datum">
                {{ getAnalysedComponentTypeStr(datum.item.ComponentType) }}
            </template>
            <template slot="Delay" slot-scope="datum">
                {{ datum.item.Delay }}
            </template>
            <template slot="IsDenominated" slot-scope="datum">
                {{ datum.item.IsDenominated }}
            </template>
            <template slot="AnalysedComponentValue" slot-scope="datum">
                {{ datum.item.Value }}
            </template>
        </b-table>

        <hr/>

        <h3 class="mb-6">Request Components</h3>
        @* Table for requestComponent *@
        <b-table :items="request.RequestComponents" :fields="requestComponentsDataFields">
            <template slot="RequestComponentType" slot-scope="datum">
                {{ getRequestComponentTypeStr(datum.item.ComponentType) }}
            </template>
            <template slot="Identifier" slot-scope="datum">
                {{ datum.item.Identifier }}
            </template>
            <template slot="QueryComponent" slot-scope="datum">
                {{ datum.item.QueryComponent }}
            </template>
            <template slot="RequestComponentValue" slot-scope="datum">
                {{ datum.item.Value }}
            </template>
        </b-table>

        <hr/>

        <h3 class="mb-6">Request Properties</h3>
        @* Table for requestProperties *@
        <b-table :items="request.RequestProperties" :fields="requestPropertiesDataFields">
            <template slot="RequestPropertyType" slot-scope="datum">
                {{ getRequestPropertyTypeStr(datum.item.RequestPropertyType) }}
            </template>
            <template slot="RequestPropertyKey" slot-scope="datum">
                {{ datum.item.Key }}
            </template>
            <template slot="RequestPropertyValue" slot-scope="datum">
                {{ datum.item.Value }}
            </template>
        </b-table>

    </div>
</div>

@section Scripts
{
    <script>
        const vm = new Vue({
            el: '#content',
            data: {
                analysedComponentsDataFields: [
                    {
                        key: 'AnalysedComponentType',
                        label: 'Component Type',
                        sortable: true,
                    },
                    {
                        key: 'Delay',
                        label: 'Delay',
                        sortable: true,
                    },
                    {
                        key: 'IsDenominated',
                        label: 'Denominated',
                        sortable: true,
                    },
                    {
                        key: 'AnalysedComponentValue',
                        label: 'Value',
                        sortable: true,
                    }
                ],
                requestComponentsDataFields: [
                    //Request Components
                    {
                        key: 'RequestComponentType',
                        label: 'Component Type',
                        sortable: true,
                    },
                    {
                        key: 'Identifier',
                        label: 'Identifier',
                        sortable: true,
                    },
                    {
                        key: 'QueryComponent',
                        label: 'Query Component',
                        sortable: true,
                    },
                    {
                        key: 'RequestComponentValue',
                        label: 'Value',
                        sortable: true,
                    }
                ],
                requestPropertiesDataFields: [
                    {
                        key: 'RequestPropertyType',
                        label: 'Property Type',
                        sortable: true,
                    },
                    {
                        key: 'RequestPropertyKey',
                        label: 'Key',
                        sortable: true,
                    },
                    {
                        key: 'RequestPropertyValue',
                        label: 'Value',
                        sortable: true,
                    }
                ],
                editRequest: {
                    requestType: @requestType,
                    responseType: @responseType,
                    dataPath: '@Model.Request.DataPath',
                    delay: @Model.Request.Delay,
                    isEnabled: @Model.Request.IsEnabled.ToString().ToLower()
                },
                // The data from the dto
                request: @Html.Raw(JsonConvert.SerializeObject(@Model.Request)),
                // Grab the types so we can check with the enum into readable data for user
                requestTypes: @Html.Raw(Json.Serialize(@Model.RequestTypes)),
                responseTypes: @Html.Raw(Json.Serialize(@Model.ResponseTypes)),
                analysedComponentTypes:
                    @Html.Raw(Json.Serialize(NozomiServiceConstants.analysedComponentTypes, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                    })),
                requestComponentTypes:
                    @Html.Raw(Json.Serialize(NozomiServiceConstants.requestComponentTypes, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                    })),
                requestPropertyTypes:
                    @Html.Raw(Json.Serialize(NozomiServiceConstants.requestPropertyTypes, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                    })),
            },
            mounted() {
                this.convertRequestTypesOption();
                this.convertResponseTypesOption();
            },
            methods: {
                convertRequestTypesOption() {
                    var requestTypesArr = [];
                    for (var i = 0; i < this.requestTypes.length; i++) {
                        var requestType = {
                            value: this.requestTypes[i].value,
                            text: this.requestTypes[i].key
                        };
                        requestTypesArr.push(requestType);
                    }
                    this.requestTypes = requestTypesArr;
                },
                convertResponseTypesOption() {
                    var responseTypesArr = [];
                    for (var i = 0; i < this.responseTypes.length; i++) {
                        var responseType = {
                            value: this.responseTypes[i].value,
                            text: this.responseTypes[i].key
                        };
                        responseTypesArr.push(responseType);
                    }
                    this.responseTypes = responseTypesArr;
                },
                async onEditRequestSubmit() {
                    const formData = new FormData();
                    formData.append('Id', '@Model.Request.Id');
                    formData.append('RequestType', this.editRequest.requestType);
                    formData.append('ResponseType', this.editRequest.responseType);
                    formData.append('DataPath', this.editRequest.dataPath);
                    formData.append('Delay', this.editRequest.delay);
                    formData.append('IsEnabled', this.editRequest.isEnabled);

                    const response = await fetch('/Admin/Request/EditRequest/@Model.Request.Id',
                        {
                            method: 'PUT',
                            body: formData
                        });

                    if (response.status === 200) {
                        const data = await response.json();
                        // Put alert for now, change the ui later.
                        alert(data.message);
                    } else {
                        alert(data.message);
                    }
                },
                getRequestTypeStr(val) {
                    if (this.requestTypes != null) {
                        for (let i = 0; i < this.requestTypes.length; i++) {
                            if (this.requestTypes[i].Value == val) {
                                return this.requestTypes[i].Key;
                            }
                        }
                    }
                    return null;
                },
                getResponseTypeStr(val) {
                    if (this.responseTypes != null) {
                        for (let i = 0; i < this.responseTypes.length; i++) {
                            if (this.responseTypes[i].Value == val) {
                                return this.responseTypes[i].Key;
                            }
                        }
                    }
                    return null;
                },
                getAnalysedComponentTypeStr(val) {
                    if (this.analysedComponentTypes != null) {
                        for (let i = 0; i < this.analysedComponentTypes.length; i++) {
                            if (this.analysedComponentTypes[i].Value === val) {
                                return this.analysedComponentTypes[i].Key;
                            }
                        }
                    }
                    return null;
                },
                getRequestComponentTypeStr(val) {
                    if (this.requestComponentTypes != null) {
                        for (let i = 0; i < this.requestComponentTypes.length; i++) {
                            if (this.requestComponentTypes[i].Value === val) {
                                return this.requestComponentTypes[i].Key;
                            }
                        }
                    }
                    return null;
                },
                getRequestPropertyTypeStr(val) {
                    if (this.requestPropertyTypes != null) {
                        for (let i = 0; i < this.requestPropertyTypes.length; i++) {
                            if (this.requestPropertyTypes[i].Value === val) {
                                return this.requestPropertyTypes[i].Key;
                            }
                        }
                    }
                    return null;
                }
            },
        })
    </script>
}